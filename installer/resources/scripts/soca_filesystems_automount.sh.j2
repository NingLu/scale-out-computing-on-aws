#!/bin/bash

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

#
# This script retrieve the /configuration/FileSystems tree for your SOCA environment and mount relevant partitions
# This script is downloaded from:
#  - s3://<bucket_specified_at_install_time>/<soca_cluster_name>/config/do_not_delete/scripts/soca_filesystems_automount.sh
#

{% include "templates/linux/common.sh.j2" %}

{% include "templates/linux/shared_storage/mount_efs.sh.j2" %}

{% include "templates/linux/shared_storage/mount_fsx_lustre.sh.j2" %}

{% include "templates/linux/shared_storage/mount_fsx_ontap.sh.j2" %}

{% include "templates/linux/shared_storage/mount_fsx_openzfs.sh.j2" %}

{% include "templates/linux/shared_storage/mount_standalone_nfs.sh.j2" %}

{% include "templates/linux/shared_storage/mount_s3.sh.j2" %}

# Include EPEL repo in case jq is not shipped via the distro default packages repository
{% include "templates/linux/epel.sh.j2" %}

source /etc/environment

# Ensure SocaFileSystemAutoMount is only executed once the entire SSM tree is created
while ! aws_cli ssm get-parameter --name "/soca/{{ context.get("/configuration/ClusterId") }}/cdk_completed" > /dev/null 2>&1; do
    log_info "/soca/{{ context.get("/configuration/ClusterId") }}/cdk_completed not found on SSM, SOCA is still being created"
    sleep 120
done

# Retrieve SocaConfig "/configuration/Filesystems" which contains all the FileSystem mount logic, return a dictionary of key/v
SOCA_FILESYSTEMS_SSM_TREE=$(aws_cli ssm get-parameters-by-path --path "/soca/{{ context.get("/configuration/ClusterId") }}/configuration/FileSystems"  \
  --recursive \
  --with-decryption \
  --query "Parameters[*].{Name:Name,Value:Value}" \
  --output json)

log_info "Retrieved SOCA FileSystem Tree: ${SOCA_FILESYSTEMS_SSM_TREE}"

# Install jq if not already there
if ! verify_package_installed jq; then
  log_info "jq not found, installing it ..."
  packages_install jq
fi

FS_MAP=$(echo "${SOCA_FILESYSTEMS_SSM_TREE}" | jq --arg prefix "/soca/{{ context.get("/configuration/ClusterId") }}" -r '
  def walk(f):
  . as $in |
  if type == "object" then
    reduce keys_unsorted[] as $key (
      {}; . + {($key): ($in[$key] | walk(f))}
    )
  elif type == "array" then
    map(walk(f))
  else
    f
  end;

  map({(.Name): .Value}) | add |
  to_entries |
  map(select(.key | startswith($prefix + "/configuration/FileSystems/"))) |
  map(.key |= sub($prefix + "/configuration/FileSystems/"; "")) |
  reduce .[] as $item ({};
    ($item.key | split("/")) as $parts |
    setpath($parts; $item.value)
  ) |
  walk(
    if type == "object" then
      with_entries(
        if .value | type == "object" and length == 1 and (keys[0] == values[0] | keys[0])
        then .value = .value[keys[0]]
        else .
        end
      )
    else .
    end
  )
')

echo "${FS_MAP}" | jq -r 'keys[]' | while read FS_NAME; do
  # Filesystem Provider (fsx_ontap, fsx_lustre, efs ...)
  PROVIDER=$(echo "${FS_MAP}" | jq -r ".${FS_NAME}.provider")

  # Whether or not the FSx is enabled or not
  ENABLED=$(echo "${FS_MAP}" | jq -r ".${FS_NAME}.enabled // \"true\"")

  # Unix path where to mount this filesystem
  MOUNT_PATH=$(echo "${FS_MAP}" | jq -r ".${FS_NAME}.mount_path")

  # Endpoint to be mounted (volume ID, filesystem ID ...)
  MOUNT_TARGET=$(echo "${FS_MAP}" | jq -r ".${FS_NAME}.mount_target")

  # Option for the mount
  MOUNT_OPTIONS=$(echo "$FS_MAP" | jq -r ".${FS_NAME}.mount_options")

  # What to do if the mount is not successful (either ignore or exit)
  ON_MOUNT_FAILURE=$(echo "${FS_MAP}" | jq -r ".${FS_NAME}.on_mount_failure //  \"ignore\"")

  log_info "Processing ${PROVIDER}: $(echo "${FS_MAP}" | jq -r ".${FS_NAME}")"

  case "${PROVIDER}" in
  "efs")
    MOUNT_FUNCTION="mount_efs"
    ;;
  "nfs")
    MOUNT_FUNCTION="mount_nfs"
    ;;
  "fsx_lustre")
    MOUNT_FUNCTION="mount_fsx_lustre"
    ;;
  "fsx_ontap")
    MOUNT_FUNCTION="mount_fsx_ontap"
    ;;
  "fsx_openzfs")
    MOUNT_FUNCTION="mount_openzfs"
    ;;
  "s3")
    MOUNT_FUNCTION="mount_s3"
    ;;
  *)
    exit_fail "Unrecognized Storage Provider ${PROVIDER} for ${FS_NAME} , must be efs / nfs / fsx_lustre / fsx_ontap / fsx_openzfs or s3"
    ;;
  esac

  if ! eval ${MOUNT_FUNCTION} --mount-path="${MOUNT_PATH}" \
        --mount-target="${MOUNT_TARGET}" \
        --mount-options="${MOUNT_OPTIONS}" \
        --on-mount-failure="${ON_MOUNT_FAILURE}" \
        --enabled="${ENABLED}"; then

      exit_fail "Error while trying to mount ${MOUNT_TARGET} via ${MOUNT_FUNCTION}, check SocaFileSystemAutoMount log"
  fi

done

log_info "SocaFileSystemsAutoMount Completed"
