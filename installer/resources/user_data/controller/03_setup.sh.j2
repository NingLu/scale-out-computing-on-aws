#!/bin/bash -xe

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

{% include "templates/linux/common.sh.j2" %}

log_info "Setup Start Date: $(date)"

# Prevent script to be executed twice (or more)
if [[ -f "/root/.soca_bootstrap_controller_{{ context.get('/configuration/ClusterId') }}_completed" ]]; then
  exit_fail "/root/.soca_bootstrap_controller_{{ context.get('/configuration/ClusterId') }}_completed already exist. To prevent configuration overwrite, we exit the script, since this machine seems to be already configured"
fi

# Install JQ
{% include "templates/linux/jq.sh.j2" %}

{% if context.get("/configuration/BaseOS") in ("ubuntu2204", "ubuntu2404") %}
  log_info "Disabling auto-update on Ubuntu"
  sed -ie 's/"1"/"0"/g' /etc/apt/apt.conf.d/20auto-upgrades
{% endif %}

# Note: OpenPBS must be installed with system python
log_info "Using Scheduler Engine: OpenPBS"
{% include "templates/linux/scheduler/openpbs/install.sh.j2" %}

{% include "templates/linux/scheduler/openpbs/configure_server.sh.j2" %}

# Set custom PATH
{% set PATH = '/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/pbs/bin:/opt/pbs/sbin:/opt/pbs/bin:/opt/soca/' ~ context.get("/configuration/ClusterId") %}
PATH="/opt/soca/{{ context.get("/configuration/ClusterId") }}/python/latest/bin:$PATH"
set_environment_variable "PATH" "{{ PATH }}"

# Set Controller IP, not needed as you are already on the controller host, but making sure the variable exist to stay consistent with the other machines
set_environment_variable "SOCA_CONTROLLER_IP" "$(hostname -I)"

# Configure User Directory (AD/OpenLDAP)
{% if context.get("/configuration/UserDirectory/provider") in ["existing_openldap", "openldap"] %}
  {% if context.get("/configuration/UserDirectory/provider") == "existing_openldap" %}
    {% include "templates/linux/openldap_client.sh.j2" %}
  {% else %}
    {% include "templates/linux/openldap_server.sh.j2" %}
  {% endif %}
{% elif context.get("/configuration/UserDirectory/provider") in ["existing_active_directory", "aws_ds_managed_activedirectory" , "aws_ds_simple_activedirectory"] %}
  {% include "templates/linux/join_activedirectory.sh.j2" %}
{% else %}
  exit_fail "UserDirectory/provider must be openldap, existing_openldap, aws_ds_simple_activedirectory, existing_active_directory or aws_ds_managed_activedirectory, detected {{ context.get("/configuration/UserDirectory/provider") }}"
{% endif %}

# Disable SELINUX
{% include "templates/linux/disable_selinux.sh.j2" %}

# Disable SSH StrictHostKey Checking
{% include "templates/linux/disable_ssh_strict_host_key_check.sh.j2" %}

# Configure Chronyd
{% include "templates/linux/chronyd.sh.j2" %}

# Disable ulimits
{% include "templates/linux/disable_ulimits.sh.j2" %}

# Install NodeJS
{% include "templates/linux/nodejs.sh.j2" %}

# Ensure Node.js environment is available and install required Node modules
if command -v npm >/dev/null 2>&1; then
  npm install --prefix "/opt/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/web_interface/static" monaco-editor@0.52.0
else
  # If npm is not in PATH, try to source NVM environment
  if [ -f "${SOCA_BOOTSTRAP_ASSETS_FOLDER}/nvm/*/.*nvm/nvm.sh" ]; then
    source "${SOCA_BOOTSTRAP_ASSETS_FOLDER}/nvm/*/.*nvm/nvm.sh"
    npm install --prefix "/opt/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/web_interface/static" monaco-editor@0.52.0
  else
    log_warning "npm not available, skipping monaco-editor installation"
  fi
fi

# Reload OpenPBS
systemctl restart pbs

# Create crontabs
echo "
# SOCA Info: Add export SOCA_DEBUG=1 to enable DEBUG capability
# ex: export SOCA_DEBUG=1; source /etc/environment; /opt/soca/{{ context.get("/configuration/ClusterId") }}/python/latest/bin/python3  /opt/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/orchestrator/nodes_manager.py
###################
# SOCA Variables
###################

###################
# Cluster Analytics
###################

* * * * * source /etc/environment;\
 /opt/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/analytics/wrapper.sh cluster_nodes_tracking

@hourly source /etc/environment; \
 /opt/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/analytics/wrapper.sh job_tracking

*/10 * * * * source /etc/environment; \
 /opt/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/analytics/wrapper.sh desktop_hosts_tracking

########################
# Cluster Log Management
########################

@daily source /etc/environment; /bin/bash /opt/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/logs_management/send_logs_s3.sh

####################
# Cluster Management
####################

* * * * * source /opt/soca/{{ context.get("/configuration/ClusterId") }}/python/latest/soca_python.env; \
 source /etc/environment; \
 /opt/soca/{{ context.get("/configuration/ClusterId") }}/python/latest/bin/python3 /opt/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/orchestrator/nodes_manager.py

# Automatic Host Provisioning
* * * * *  source /opt/soca/{{ context.get("/configuration/ClusterId") }}/python/latest/soca_python.env; \
 source /etc/environment; \
 /opt/soca/{{ context.get("/configuration/ClusterId") }}/python/latest/bin/python3 /opt/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/orchestrator/dispatcher.py -c /opt/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/orchestrator/settings/queue_mapping.yml -t compute

* * * * *  source /opt/soca/{{ context.get("/configuration/ClusterId") }}/python/latest/soca_python.env; \
 source /etc/environment; \
 /opt/soca/{{ context.get("/configuration/ClusterId") }}/python/latest/bin/python3 /opt/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/orchestrator/dispatcher.py -c /opt/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/orchestrator/settings/queue_mapping.yml -t job-shared

* * * * * source /opt/soca/{{ context.get("/configuration/ClusterId") }}/python/latest/soca_python.env; \
  source /etc/environment; \
  /opt/soca/{{ context.get("/configuration/ClusterId") }}/python/latest/bin/python3 /opt/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/orchestrator/dispatcher.py -c /opt/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/orchestrator/settings/queue_mapping.yml -t test

# Add/Remove DCV hosts and configure ALB
*/3 * * * *  source /opt/soca/{{ context.get("/configuration/ClusterId") }}/python/latest/soca_python.env; \
  /opt/soca/{{ context.get("/configuration/ClusterId") }}/python/latest/bin/python3 /opt/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/orchestrator/dcv_alb_manager.py >> /opt/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/orchestrator/logs/dcv_alb_manager.log 2>&1

################
# Cluster Web UI
################

# Restart UI at reboot
@reboot /opt/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/web_interface/socawebui.sh start

" | crontab -

# Generate 10 years internal SSL certificate for Soca Web UI
pushd /opt/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/web_interface
openssl req -new -newkey rsa:4096 -days 3650 -nodes -x509 \
    -subj "/C=US/ST=California/L=Sunnyvale/CN=internal.soca.webui.cert" \
    -keyout cert.key -out cert.crt

# Append the cluster name on the SOCA HTML template
IFS="-" read name sanitized_cluster_name <<< "echo {{ context.get("/configuration/ClusterId") }}"
sed -i "s/__SOCA_CLUSTER__NAME__/${sanitized_cluster_name}/g" /opt/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/web_interface/templates/common/horizontal_menu_bar.html

# Fix permissions for uwsgi binary and start Web UI
chmod +x /opt/soca/{{ context.get("/configuration/ClusterId") }}/python/latest/bin/uwsgi
chmod +x /opt/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/web_interface/socawebui.sh
./socawebui.sh start

# Wait until the endpoint is reachable
sleep 30

START_WEB_UI_MAX_ATTEMPT=10
START_WEB_UI_CURRENT_ATTEMPT=0
while [[ "$(curl https://localhost:8443/ping --insecure  -s -o /dev/null -w '%{http_code}')" != "200" ]]; do
  ((START_WEB_UI_CURRENT_ATTEMPT=START_WEB_UI_CURRENT_ATTEMPT+1))
  if [[ $START_WEB_UI_CURRENT_ATTEMPT -ge $START_WEB_UI_MAX_ATTEMPT ]]; then
      exit_fail "error: Timed out waiting for starting the web interface. please check uwsgi logs under /opt/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/web_interface/logs/ and run the create user command manually."
  fi
  log_info "Web UI is not returning HTTP/200 ... restarting process ... "
  ./socawebui.sh stop
  sleep 10
  ./socawebui.sh start
  sleep 30
done
log_info "Web UI is ready and serving requests ... "

# Create default home structure
mkdir -p /data/home

# This is only available when SOCA creates the User/secret
# Existing deployments do not have this secret populated since they leverage a admin-populated secret
{% if context.get("/configuration/UserDirectory/provider") in ["aws_ds_managed_activedirectory", "openldap"] %}
  SOCA_DEFAULT_ADMIN_USER=$(get_secret "/soca/{{ context.get("/configuration/ClusterId") }}/SocaAdminUser")
{% endif %}

{% if context.get("/configuration/UserDirectory/provider") in ["aws_ds_managed_activedirectory"] %}
  # Create default AD Admin Group if needed
  SOCA_AD_ADMINS_SEARCH_BASE="{{ context.get("/configuration/UserDirectory/admins_search_base") | lower }}"
  SOCA_AD_ADMIN_GROUP_NAME=$(echo ${SOCA_AD_ADMINS_SEARCH_BASE} | awk -F'[,=]' '{print $2}')
  MAX_CREATE_ADMIN_GROUP_ATTEMPT=5
  CREATE_ADMIN_GROUP_ATTEMPT_COUNT=0
  log_info "Creating default SOCA Admin Group on Directory Service"
  while true; do
    REQUEST_HTTP_CODE_CREATE_GROUP=$(curl --silent -k -H "X-SOCA-TOKEN: $(cat /opt/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/web_interface/keys/admin_api_key.txt)" \
      --data-urlencode "group=${SOCA_AD_ADMIN_GROUP_NAME}"  \
      -w "%{http_code}" -o ${SOCA_BOOTSTRAP_LOGS_FOLDER}/create_admin_group.log -X POST https://127.0.0.1:8443/api/ldap/group)

    if [[ ${REQUEST_HTTP_CODE_CREATE_GROUP} == "200" ]]; then
      log_info "SOCA Admin Group created successfully."
      break
    else
      log_info "Unable to create SOCA Admin Group due to $(cat ${SOCA_BOOTSTRAP_LOGS_FOLDER}/create_admin_group.log), trying again soon ..."
      ((CREATE_ADMIN_GROUP_ATTEMPT_COUNT++))

      if [[ ${CREATE_ADMIN_GROUP_ATTEMPT_COUNT} -ge ${MAX_CREATE_ADMIN_GROUP_ATTEMPT} ]]; then
        echo "Unable to create SOCA Admin Group after ${MAX_CREATE_ADMIN_GROUP_ATTEMPT} attempts, bootstrap sequence will continue."
        break
      fi
      sleep 10
    fi
  done
{% elif context.get("/configuration/UserDirectory/provider") in ["existing_active_directory", "existing_openldap"]  %}
  log_info "Using an existing Active Directory or OpenLDAP, skipping Admin Group Creation"
{% endif %}


{% if context.get("/configuration/UserDirectory/provider") not in ["existing_active_directory", "existing_openldap"]  %}
  # Create default LDAP user with admin privileges
  MAX_CREATE_USER_ATTEMPT=5
  CREATE_USER_ATTEMPT_COUNT=0
  while true; do
    REQUEST_HTTP_CODE_CREATE_USER=$(curl --silent -k -H "X-SOCA-TOKEN: $(cat /opt/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/web_interface/keys/admin_api_key.txt)" \
      --data-urlencode "user=$(echo ${SOCA_DEFAULT_ADMIN_USER} | jq -r ". | fromjson.username")" \
      --data-urlencode "password=$(echo ${SOCA_DEFAULT_ADMIN_USER} | jq -r ". | fromjson.password")" \
      --data-urlencode "sudoers=1" \
      --data-urlencode "email=admin@soca" \
      --data-urlencode "uid=0" \
      --data-urlencode "gid=0" \
      -w "%{http_code}" -o ${SOCA_BOOTSTRAP_LOGS_FOLDER}/create_new_user.log -X POST https://127.0.0.1:8443/api/ldap/user)

    if [[ ${REQUEST_HTTP_CODE_CREATE_USER} == "200" ]]; then
      log_info "User created successfully."
      break
    else
      log_warning "Unable to create new user due to $(cat ${SOCA_BOOTSTRAP_LOGS_FOLDER}/create_new_user.log), trying again soon ..."
      ((CREATE_USER_ATTEMPT_COUNT++))

      if [[ ${CREATE_USER_ATTEMPT_COUNT} -ge ${MAX_CREATE_USER_ATTEMPT} ]]; then
        log_error "Unable to create user after ${MAX_CREATE_USER_ATTEMPT} attempts, bootstrap sequence will continue."
        break
      fi

      sleep 10
    fi
  done
{% else %}
  log_info "Using an existing Active Directory or OpenLDAP, skipping User Creation"
{%  endif %}


# Disable job submission for local users
{% include "templates/linux/scheduler/openpbs/disable_local_account_job_submission.sh.j2" %}

# Tag EBS disks manually as CFN ASG does not support it
{% include "templates/linux/tags/ebs.sh.j2" %}

# Tag Network Interface for the Compute Node
{% include "templates/linux/tags/eni.sh.j2" %}

# Configure Message Of The Day (MOTD)
{% include "templates/linux/motd.sh.j2" %}

# Restart/Enable crond
{% if context.get("/configuration/BaseOS") in ("ubuntu2204", "ubuntu2404") %}
  systemctl enable cron
  systemctl restart cron
{% else %}
  systemctl enable crond
  systemctl restart crond
{% endif %}

# Restrict SSH to SOCA Controller Host
{% include "templates/linux/restrict_ssh_access.sh.j2" %}

# Create bootstrap lock
touch "/root/.soca_bootstrap_controller_{{ context.get('/configuration/ClusterId') }}_completed"

# Install CloudWatch Log Agent
{% include "templates/linux/aws_cloudwatch_agent.sh.j2" %}

# Todo? run some awscli describe-instance and populate the cache?

# Install OpenMPI
{% include "templates/linux/openmpi.sh.j2" %}