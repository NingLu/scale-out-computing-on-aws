#!/bin/bash -xe

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Important: Keep this file < 16 KBs (AWS EC2 UserData requirement)
# Edit 02_pre_requisites.sh.j2 / 03_setup.sh.j2 instead


# Load common logging feature
{% include "templates/linux/common/log.sh.j2" %}

log_info "User Data Start Date: $(date)"

# Verify previous SOCA Bootstrap lock presence
if [[ -f "/root/.soca_bootstrap_controller_{{ context.get('/configuration/ClusterId') }}_completed" ]]; then
  exit_fail "/root/.soca_bootstrap_controller_{{ context.get('/configuration/ClusterId') }}_completed already exist. To prevent configuration overwrite, we exit the script, since this machine seems to be already configured"
fi

# Configure HTTP proxy if any
{% include "templates/linux/http_proxy.sh.j2" %}

# Load packages management functions
{% include "templates/linux/system_packages/packages_management.sh.j2" %}

# Load common File Download wrapper
{% include "templates/linux/common/file_download.sh.j2" %}

source /etc/environment

{% if context.get("/configuration/BaseOS") == "centos7" %}
  # CentOS7 is EOL, manual patch to support Yum repo
  {% include "templates/linux/patch_centos7_repos.sh.j2" %}
{% endif %}

# Install awscli
{% include "templates/linux/awscli.sh.j2" %}

# Load custom wrappers
{% include "templates/linux/common/wrapper_awscli.sh.j2" %}
{% include "templates/linux/common/wrapper_imds.sh.j2" %}
{% include "templates/linux/common/setup_environment_file.sh.j2" %}

# Install AWS Systems Manager agent
{% include "templates/linux/aws_ssm_agent.sh.j2" %}

# Remove any previous references of SOCA to the environment file (if any)
cp /etc/environment /etc/environment.original.$(date +%s)
sed -i '/[SOCA_DO_NOT_DELETE]/d' /etc/environment

# Set Environment variables
set_environment_variable "AWS_DEFAULT_REGION" "{{ context.get("/configuration/Region") }}"
set_environment_variable "SOCA_BOOTSTRAP_ASSETS_FOLDER" "/root/soca_bootstrap_$(instance_id)"
set_environment_variable "SOCA_BOOTSTRAP_LOGS_FOLDER" "/root/soca_bootstrap_$(instance_id)/logs"
set_environment_variable "SOCA_CLUSTER_ID" "{{ context.get("/configuration/ClusterId") }}" # needed for Logs backup
set_environment_variable "SOCA_NODE_TYPE" "{{ context.get("/job/NodeType") }}"
set_environment_variable "SOCA_INSTALL_BUCKET" "{{ context.get("/configuration/S3Bucket") }}" # needed for Logs backup
set_environment_variable "SOCA_VERSION" "{{ context.get("/configuration/Version") }}" # needed for Logs backup

# Create SOCA Bootstrap structure
mkdir -p ${SOCA_BOOTSTRAP_ASSETS_FOLDER}
mkdir -p ${SOCA_BOOTSTRAP_LOGS_FOLDER}

log_info "Boostrap Asset Folder: ${SOCA_BOOTSTRAP_ASSETS_FOLDER}"
log_info "Boostrap Logs Folder: ${SOCA_BOOTSTRAP_LOGS_FOLDER}"

# Mount Filesystems
{% include "templates/linux/filesystems_automount.sh.j2" %}

# Retrieve the region of the bucket specified at install time
{% if context.get("/configuration/Region") in ('us-gov-east-1', 'us-gov-west-1')  %}
  S3_BUCKET_REGION=$(curl -s --head {{ context.get("/configuration/S3Bucket") }}.s3.{{ context.get("/configuration/Region") }}.amazonaws.com | grep bucket-region | awk '{print $2}' | tr -d '\r\n')
{% else %}
  S3_BUCKET_REGION=$(curl -s --head {{ context.get("/configuration/S3Bucket") }}.s3.amazonaws.com | grep bucket-region | awk '{print $2}' | tr -d '\r\n')
{% endif %}

# Retrieve SOCA Pre-Requisite from S3 and execute the script
aws_cli s3 --region ${S3_BUCKET_REGION} cp s3://{{ context.get("/configuration/S3Bucket") }}/{{ context.get("/configuration/ClusterId") }}/config/do_not_delete/user_data/controller/02_prerequisites.sh ${SOCA_BOOTSTRAP_ASSETS_FOLDER}

/bin/bash ${SOCA_BOOTSTRAP_ASSETS_FOLDER}/02_prerequisites.sh >> ${SOCA_BOOTSTRAP_LOGS_FOLDER}/02_prerequisites.sh.log 2>&1


