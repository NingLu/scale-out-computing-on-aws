#!/bin/bash -xe

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Note: This file is generated by CDK during SOCA install.
# Not all resources are available here (e.g /configuration/ControllerPrivateDnsName won't exist when this file is created)
# All SOCA resources will be available on 03_setup.sh

# This file exist as the 01_user_data.sh is limited in size (16Kb)
# and we can't invoke 03_setup.sh.j2 directly from CDK as not all AWS resources are available.

{% include "templates/linux/common.sh.j2" %}

{% include "templates/linux/packages_management.sh.j2" %}

{% include "templates/linux/common/wrapper_awscli.sh.j2" %}

{% include "templates/linux/aws_ssm_agent.sh.j2" %}

{% include "templates/linux/system_packages.sh.j2" %}

# Install SOCA Python
{% include "templates/linux/soca_python.sh.j2" %}

{% include "templates/linux/cache_client.sh.j2" %}

# Retrieve SOCA configuration under soca.tar.gz and extract it on /apps/
{% if context.get("/configuration/Region") in ('us-gov-east-1', 'us-gov-west-1')  %}
  S3_BUCKET_REGION=$(curl -s --head {{ context.get("/configuration/S3Bucket") }}.s3.{{ context.get("/configuration/Region") }}.amazonaws.com | grep bucket-region | awk '{print $2}' | tr -d '\r\n')
{% else %}
  S3_BUCKET_REGION=$(curl -s --head {{ context.get("/configuration/S3Bucket") }}.s3.amazonaws.com | grep bucket-region | awk '{print $2}' | tr -d '\r\n')
{% endif %}

# Retrieve SOCA configuration under soca.tar.gz and extract it on /apps/
aws_cli s3 --region ${S3_BUCKET_REGION} cp s3://{{ context.get("/configuration/S3Bucket") }}/{{ context.get("/configuration/ClusterId") }}/soca.tar.gz /root

# Download codebase, temp extract on root just to retrieve j2generator
tar -xvf /root/soca.tar.gz -C /apps/soca/{{ context.get("/configuration/ClusterId") }} --no-same-owner
mkdir -p /apps/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/orchestrator/logs
chmod +x /apps/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/orchestrator/socaqstat.py
chmod +x /apps/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/tools/j2generator/j2generator.sh

# Apply permissions
chmod -R 600 /apps/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/
chmod -R 600 /apps/soca/{{ context.get("/configuration/ClusterId") }}/cluster_node_boostrap/
chmod -R 600 /apps/soca/{{ context.get("/configuration/ClusterId") }}/cluster_hooks/
chmod -R 600 /apps/soca/{{ context.get("/configuration/ClusterId") }}/resources/
chmod -R 655 /apps/soca/{{ context.get("/configuration/ClusterId") }}/python/

# Download Setup.sh Jinja template
aws_cli s3 --region ${S3_BUCKET_REGION} cp s3://{{ context.get("/configuration/S3Bucket") }}/{{ context.get("/configuration/ClusterId") }}/user_data/controller/03_setup.sh.j2 /root

# Wait until all parameters have been added to CDK
while ! aws_cli ssm get-parameter --name "/soca/{{ context.get("/configuration/ClusterId") }}/cdk_completed" > /dev/null 2>&1; do
    log_info "/soca/{{ context.get("/configuration/ClusterId") }}/cdk_completed not found on SSM, CDK & CloudFormation are probably still in creation, waiting a little longer"
    sleep 120
done

# Prepare the final setup phase now that all resources are fully available from SSM
export SOCA_CONFIGURATION="{{ context.get("/configuration/ClusterId") }}"
export AWS_DEFAULT_REGION="{{ context.get("/configuration/Region") }}"

/bin/bash /apps/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/tools/j2generator/j2generator.sh --get-template "03_setup.sh.j2" \
    --output-file "/root/03_setup.sh" \
    --ssm-key "/" \
    --add-value "KEY=/job/NodeType VALUE=controller TYPE=str" \
    --template-dirs "/apps/soca/{{ context.get("/configuration/ClusterId") }}/cluster_node_bootstrap/" \
    --template-dirs "/root/"

/bin/bash /root/03_setup.sh >> /root/03_setup.sh.log 2>&1


