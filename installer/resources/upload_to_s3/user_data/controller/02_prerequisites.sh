#!/bin/bash -xe

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Note: This file is generated by CDK during SOCA install.
# Not all resources are available here (e.g /configuration/ControllerPrivateDnsName won't exist when this file is created)
# All SOCA resources will be available on 03_setup.sh

# This file exist as the 01_user_data.sh is limited in size (16Kb)
# and we can't invoke 03_setup.sh.j2 directly from CDK as not all AWS resources are available.

# Load common function such as logging, awscli wrapper
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin: Log Functions. Added via common.j2
function log_debug() {
  log_wrapper "DEBUG" "${@}"
}

function log_info() {
  log_wrapper "INFO" "${@}"
}

function log_warning() {
  log_wrapper "WARNING" "${@}"
}

function log_error() {
  log_wrapper "ERROR" "${@}"
}

function exit_fail () {
  log_wrapper "FATAL" "${@}"
  exit 1
}

function log_wrapper() {
  # To avoid issue with native echo and log_info in function (both write to stdout), we are redirecting log_info to stderr
  # we use echo to return function output from specific functions
  local LOG_LEVEL="$1"
  shift
  local VALID_LOG_LEVELS=("INFO" "DEBUG" "WARNING" "ERROR" "FATAL")
  if [[ ! "${VALID_LOG_LEVELS[*]}" =~ "${LOG_LEVEL}" ]]; then
    echo "[$(date +"%Y-%m-%d %H:%M:%S,%3N")] [INVALID] Invalid log level: ${LOG_LEVEL}, Call log_debug log_info log_warning log_error or exit_fail directly." >&2
    exit 1
  fi

  local LOG_MESSAGE="[$(date +"%Y-%m-%d %H:%M:%S,%3N")] [${LOG_LEVEL}] ${@}"
  if [[ -n "${SOCA_BOOTSTRAP_LOGS_FOLDER}" ]] && [[ -d "${SOCA_BOOTSTRAP_LOGS_FOLDER}" ]]; then
    # Keep track of warning/fatal/error on stdout as well as separate files
    if [[ ${LOG_LEVEL} == "WARNING" ]] || [[ ${LOG_LEVEL} == "FATAL" ]] || [[ ${LOG_LEVEL} == "ERROR" ]]; then
      echo "${LOG_MESSAGE}" | tee -a "${SOCA_BOOTSTRAP_LOGS_FOLDER}/bootstrap_${LOG_LEVEL}.log" >&2
    else
      echo "${LOG_MESSAGE}" >&2
    fi
  else
    # Handle case where SOCA_BOOTSTRAP_LOGS_FOLDER is not set
    echo "${LOG_MESSAGE}" >&2
  fi
}
# End: Log Functions

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin: File Downloader (HTTP and S3) Added via common.j2
function file_download() {

  # file_download --download-url="https://link/file.txt" --save-as="file.txt" <-- will download from internet via https
  # file_download --download-url="s3://mybucket/file.txt" --save-as="file.txt"  <-- will download from s3 via awscli
  # Optional: Specify --sha256-checksum to verify data integrity
  # Optional: Specify --wget-options to add any addition options (note: --quiet is enabled by default)

  local DOWNLOAD_URL
  local SAVE_AS
  local SHA256_CHECKSUM_EXPECTED
  local SHA256_CHECKSUM_FOUND
  local WGET_OPTIONS
  local DOWNLOAD_TYPE
  log_info "Detected file_download request with args: ${*}"

  for arg in "$@"; do
    case $arg in
      --download-url=*) DOWNLOAD_URL="${arg#*=}" ;;
      --save-as=*) SAVE_AS="${arg#*=}" ;;
      --sha256-checksum=*) SHA256_CHECKSUM_EXPECTED="${arg#*=}" ;;
      --wget-options=*) WGET_OPTIONS="${arg#*=}" ;;
      *) exit_fail "Unknown arg ${arg} for file_download";;
    esac
  done

  if [[ ${DOWNLOAD_URL} =~ ^s3://$ ]]; then
      log_info "${DOWNLOAD_URL} seems to be a S3 URL, setting DOWNLOAD_TYPE to S3"
      DOWNLOAD_TYPE="s3"
  else
       log_info "${DOWNLOAD_URL} seems to be an HTTP URL, setting DOWNLOAD_TYPE to http"
      DOWNLOAD_TYPE="http"
  fi

  if [[ -z ${DOWNLOAD_URL} ]]; then
    exit_fail "DOWNLOAD_URL not found for file_download. Please specify --download-url"
  fi

  if [[ -z ${DOWNLOAD_TYPE} ]]; then
    log_info "DOWNLOAD_TYPE not found, default to HTTP. Specify --download-type http or s3. "
    DOWNLOAD_TYPE="http"
  fi

  if [[ ! ${DOWNLOAD_TYPE} == "s3" ]] && [[ ! ${DOWNLOAD_TYPE} == "http" ]]; then
    exit_fail "DOWNLOAD_TYPE must be either s3 or http. Detected ${DOWNLOAD_TYPE} . Specify --download-type http or s3. "
  fi


  if [[ -z ${SAVE_AS} ]]; then
    exit_fail "SAVE_AS not found, for file_download. Please specify --save-as"
  fi

  if [[ ${DOWNLOAD_TYPE} == "http" ]]; then
    # HTTP
    if ! verify_package_installed wget; then
      packages_install wget
    fi

    # note: Do not add WGET_OPTIONS between quotes to avoid them being treated as string
    if wget --quiet ${WGET_OPTIONS} "${DOWNLOAD_URL}" -O "${SAVE_AS}"; then
      log_info "${DOWNLOAD_URL} downloaded successfully and saved as ${SAVE_AS}"
    else
      exit_fail "Error downloading [${DOWNLOAD_URL}] wget returned an error, check the logs for more details"
    fi

  else
    # S3
    if aws_cli s3 cp ${DOWNLOAD_URL} ${SAVE_AS} --quiet; then
      log_info "${DOWNLOAD_URL} downloaded successfully and saved as ${SAVE_AS}"
    else
      exit_fail "Error downloading ${DOWNLOAD_URL}. aws_cli returned an error"
    fi
  fi

  # If --sha256-checksum is provided, proceed to an integrity check
  if [[ -n ${SHA256_CHECKSUM_EXPECTED} ]]; then
    log_info "--sha256-checksum found, verifying file"
    SHA256_CHECKSUM_FOUND=$(sha256sum "${SAVE_AS}" | awk '{print $1}')
    if [[ "${SHA256_CHECKSUM_FOUND}" != "${SHA256_CHECKSUM_EXPECTED}" ]];  then
      exit_fail "Checksum for ${DOWNLOAD_URL} failed. Expected SHA256 ${SHA256_CHECKSUM_EXPECTED}, but found ${SHA256_CHECKSUM_FOUND} File may be compromised."
    else
      log_info "Checksum verified: Expected SHA256 ${SHA256_CHECKSUM_EXPECTED}, found ${SHA256_CHECKSUM_FOUND}"
    fi
  fi
}
# End: File Downloader

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# These functions are available on all services (controller, compute node, login node, scheduler ...) via `common.sh.j2`
# Always use theses function when interacting with system packages.

function packages_remove () {
  # Remove specified packages (e.g: packages_remove pkg1 pkg2 ... pkgN)
  if [[ $# -eq 0 ]]; then
    exit_fail "packages_remove - No package list specified. Exiting... "
  fi

  
    packages_exec_command dnf remove -y "${@}"
  
}

function packages_install () {
  # Install specified packages (e.g: packages_install pkg1 pkg2 ... pkgN)
  if [[ $# -eq 0 ]]; then
    exit_fail "packages_install - No package list specified. Exiting... "
  fi

  
    packages_exec_command dnf install -y "${@}"
  
}

function verify_package_installed () {
  # Return "true" is a given package is installed (e.g: verify_package_installed pkg_name)
  if [[ $# -eq 0 ]]; then
    exit_fail "verify_package_installed - No package list specified. Exiting... "
  fi

  
    rpm -q ${1} &> /dev/null &&  return 0 || return 1
  
}

function packages_clean () {
  # Remove un-necessary packages
  
    packages_exec_command dnf clean all
  
}

function packages_generic_command() {
  # generic wrapper for commands other than install/remove
  
    packages_exec_command dnf "${@}"
  
}

function packages_exec_command () {
  # wrapper for all exec commands
  local MAX_ATTEMPTS=10
  local ATTEMPT_NUMBER=1
  local SLEEP_TIME_SECONDS=60
  local EXEC_COMMAND=("$@")
  log_info "Attempting to run ${EXEC_COMMAND[@]}"
  while [[ ${ATTEMPT_NUMBER} -le ${MAX_ATTEMPTS} ]]; do
    log_info "Attempt ${ATTEMPT_NUMBER}/${MAX_ATTEMPTS})"
    "${EXEC_COMMAND[@]}"
    if [[ $? -eq 0 ]]; then
      log_info "Command successful after: ${ATTEMPT_NUMBER}/${MAX_ATTEMPTS} attempts"
      return 0
    else
      log_error "${EXEC_COMMAND[@]} failed on Attempt ${ATTEMPT_NUMBER}/${MAX_ATTEMPTS}. Will try again in ${SLEEP_TIME_SECONDS} seconds"
      sleep ${SLEEP_TIME_SECONDS}
      ((ATTEMPT_NUMBER++))
    fi
  done
  exit_fail "${EXEC_COMMAND[@]} failed after all attempts, exiting .."
}

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin: Reboot management. Added via common.sh.j2
function unset_reboot_required () {
  echo -n "no" > /root/.soca_reboot_required.txt
}

function set_reboot_required () {
  log_info "[REBOOT REQUIRED]: ${1}"
  echo -n "yes" > /root/.soca_reboot_required.txt
}

function get_reboot_required () {
  if [[ -f /root/.soca_reboot_required.txt ]]; then
    cat /root/.soca_reboot_required.txt
  else
     echo -n "no"
  fi
}
# End: Reboot Management

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin - Wrapper AWSCLI. Added via common.sh.j2
function aws_cli () {
  local AWS=$(command -v aws)

  # Will verify if the output of the command to run is on the cache
  local CHECK_CACHE="true"
  local CACHED_RESULT

  # Automatically add --region if not specified
  if [[ "$*" == *"--region"* ]]; then
    local AWS_API_CALL="${AWS} $*"
  else
    local AWS_API_CALL="${AWS} --region us-east-2 $*"
  fi

  # Do not check cache_get_key for any query specific to secretsmanager as cache_get_key has a dependency with aws_cli
  # and will cause circular dependency errors. Moreover, secrets must not be cached on ElastiCache.
  if [[ "$*" == "secretsmanager"* ]]; then
    CHECK_CACHE="false"
  fi

  # Check if this API call has already been executed previously and results are available on ElastiCache
  if [[ "${CHECK_CACHE}" == "true" ]]; then
    # cache_get_key is not available on User Data and imported via cache_client.sh.j2
    if declare -F cache_get_key > /dev/null; then
      CACHED_RESULT=$(cache_get_key "${AWS_API_CALL}")
      if [[ ${CACHED_RESULT} == "CACHE_MISS" ]]; then
        # Key does not exist on ElastiCache, run actual API call
        ${AWS_API_CALL}
      else
        echo -n ${CACHED_RESULT}
      fi
    else
      # cache_get_key function does not exist, import it via cache_client.sh.j2, default actual API call.
      ${AWS_API_CALL}
    fi
  else
    # bypass cache, run actual API call
    ${AWS_API_CALL}
  fi

}
# End - Wrapper AWSCLI

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin - Wrapper EC2. Added via common.sh.j2
function ec2_describe_instance_types () {
  # Wrapper for ec2 describe-instance-types
  # ex:
  # describe_instance_types "GpuInfo.Gpus[].Manufacturer"
  # describe_instance_types "InstanceType"

  local PARAMETER="${1}"
  local INSTANCE_INFO
  local CACHED_RESULT
  local INSTANCE_TYPE=$(instance_type)

  if [[ -z ${PARAMETER} ]]; then
    local JQ_QUERY=".InstanceTypes[]"
  else
    local JQ_QUERY=".InstanceTypes[].${PARAMETER}"
  fi

  INSTANCE_INFO=$(aws_cli ec2 describe-instance-types --instance-types "${INSTANCE_TYPE}" --output json)
  echo -n ${INSTANCE_INFO} | jq -r "${JQ_QUERY}  // empty" 2>/dev/null || echo -n ""
}
# End - Wrapper EC2

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin - Wrapper IMDS. Added via common.sh.j2
function imds_get () {
  local SLASH=''
  local IMDS_HOST="http://169.254.169.254"
  local IMDS_TTL="300"
  # prepend a slash if needed
  if [[ "${1:0:1}" == '/' ]]; then
    SLASH=''
  else
    SLASH='/'
  fi
  local URL="${IMDS_HOST}${SLASH}${1}"

  # Get an Auth token
  local TOKEN=$(curl --silent -X PUT "${IMDS_HOST}/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: ${IMDS_TTL}")

  # Get the requested value and echo it back
  local OUTPUT=$(curl --silent -H "X-aws-ec2-metadata-token: ${TOKEN}" "${URL}")
  echo -n "${OUTPUT}"
}

function instance_type () {
  echo -n $(imds_get /latest/meta-data/instance-type)
}

function instance_family () {
  echo -n  $(imds_get /latest/meta-data/instance-type | cut -d. -f1)
}

function instance_id () {
  echo -n $(imds_get /latest/meta-data/instance-id)
}

function instance_region () {
  echo -n $(imds_get /latest/meta-data/placement/region)
}

function instance_az () {
  echo -n $(imds_get /latest/meta-data/placement/availability-zone)
}
# End - Wrapper IMDS

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin - Wrapper for Secrets Manager. Added via common.sh.j2
function get_secret() {
    local SECRET_NAME="${1}"
    local MAX_ATTEMPT=10
    local CURRENT_ATTEMPT=0
    local SLEEP_INTERVAL=180

    if ! verify_package_installed jq; then
      packages_install jq
    fi

    local JQ=$(which jq)
    while ! secret=$(aws_cli secretsmanager get-secret-value --secret-id "${SECRET_NAME}" --query SecretString --output json); do
        ((CURRENT_ATTEMPT=CURRENT_ATTEMPT+1))
        if [[ ${CURRENT_ATTEMPT} -ge ${MAX_ATTEMPT} ]]; then
            exit_fail "error: Timed out waiting for secret ${SECRET_NAME} from secrets manager"
        fi
        log_info "Secret Manager is not ready yet for ${SECRET_NAME} ... Waiting ${SLEEP_INTERVAL} s... Loop count is: ${CURRENT_ATTEMPT}/${MAX_ATTEMPT}"
        sleep ${SLEEP_INTERVAL}
    done
    echo -n ${secret}
}
# End - Wrapper for Secrets Manager

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin - Setup /etc/environment
function set_environment_variable () {
  local VARIABLE_NAME=${1}
  local VARIABLE_VALUE=${2}
  local SOCA_LINE_SUFFIX_IDENTIFIER="# SOCA Environment Variable, [SOCA_DO_NOT_DELETE]" # added to each entry

  if [[ -z ${VARIABLE_NAME} ]]; then
    exit_fail "set_environment_variable. VARIABLE_NAME (first argument) not found"
  fi
  if [[ -z ${VARIABLE_VALUE} ]]; then
    exit_fail "set_environment_variable. VARIABLE_VALUE (second argument) not found"
  fi
  log_info "Setting ${VARIABLE_NAME}=${VARIABLE_VALUE} to /etc/environment"
  if grep -q "^[^#]*${VARIABLE_NAME}=${VARIABLE_VALUE}" /etc/environment; then
      log_info "${VARIABLE_NAME}=${VARIABLE_VALUE} already found in  /etc/environment, ignoring ..."
  else
      if grep -q "^[^#]*${VARIABLE_NAME}=" /etc/environment; then
        log_info "${VARIABLE_NAME}= found but not pointing to ${VARIABLE_VALUE}, remove the line ... "
        sed -i "/^[^#]*${VARIABLE_NAME}=/d" /etc/environment
      fi
      log_info "Adding ${VARIABLE_NAME}=${VARIABLE_VALUE} to /etc/environment"
      {
        echo export "${VARIABLE_NAME}=\"${VARIABLE_VALUE}\"" ${SOCA_LINE_SUFFIX_IDENTIFIER}
      } >> /etc/environment
      # Export for current shell
      export "${VARIABLE_NAME}=${VARIABLE_VALUE}"
  fi
}
# End - Setup /etc/environment


export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/pbs/bin:/opt/pbs/sbin:/apps/soca/soca-rhel12:${PATH}

# Source environment
source /etc/environment

log_info "Pre-Requisite Start Date: $(date)"

# Prevent script to be executed twice (or more)
if [[ -f "/root/.soca_bootstrap_controller_soca-rhel12_completed" ]]; then
  exit_fail "/root/.soca_bootstrap_controller_soca-rhel12_completed already exist. To prevent configuration overwrite, we exit the script, since this machine seems to be already configured"
fi

# Install AWS SSM Agent
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin: Install AWS SSM agent
function install_ssm_agent () {
  log_info "# Begin: Install AWS SSM agent"
  local MACHINE=$(uname -m)
  if ! systemctl status amazon-ssm-agent; then
      if [[ ${MACHINE} == "x86_64" ]]; then
          packages_install "https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm"
      elif [[ ${MACHINE} == "aarch64" ]]; then
          packages_install "https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_arm64/amazon-ssm-agent.rpm"
      fi
      systemctl enable amazon-ssm-agent || true
      systemctl restart amazon-ssm-agent
  fi
  log_info "# End: Install AWS SSM Agent"
}
install_ssm_agent

# End: Install AWS SSM Agent

# Install Required System library/packages
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin: Install/Update Required Linux Packages

# Add EPEL
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin: Install EPEL repository
function install_epel () {
    # Note: CRB / Powertool repo for RHEL8+ based distro are managed via system_packages.sh.j2
    # install_epel is also called at the beginning of system_packages.sh.j2

    pushd "${SOCA_BOOTSTRAP_ASSETS_FOLDER}"
    local EPEL_URL
    local EPEL_RPM

    if ls -ltr /etc/yum.repos.d/ | grep epel; then
      log_info "EPEL repo are already installed on this machine"
    else
      log_info "EPEL repo not found, installing it ..."

      

         
           EPEL_URL="https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm"
         
        log_info "Downloading EPEL RPM from ${EPEL_URL}"
        file_download --download-url="${EPEL_URL}" --save-as="epel-installer.rpm"
        packages_install "epel-installer.rpm"

      
    fi

    popd

}
install_epel

function system_packages_install {
  log_info "# Begin: Install/Update Required Linux Packages"
  # Will Create a lock file to avoid re-installing packages if bootstrap has already been executed
  local PACKAGES_ALREADY_INSTALLED_FILE_LOCK="/root/.soca_preinstalled_packages_soca-rhel12.log"
  local SYSTEM_PKGS # List of packages to be installed on all nodes
  local USER_EXTRA_PKGS # Additional packages to install at runtime
  local ADD_PKGS # Custom list of packages to add based on distro, see below
  local REMOVE_PKGS # Custom list of packages to remove based on distro, see below see below

  # Include potential extra package specified by customer
  # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# List of new packages you would like to automatically install on all your SOCA nodes
# Ensure the packages are available on all distro, otherwise directly edit the ADD_PKGS directly on the "os" folder

USER_EXTRA_PKGS=(
  telnet
)

  if [[ ! -f "${PACKAGES_ALREADY_INSTALLED_FILE_LOCK}" ]]; then
    log_info "No preinstalled package log found on ${PACKAGES_ALREADY_INSTALLED_FILE_LOCK} - preparing BaseOS - rhel9 .."

    # Get list of Linux packages to install for each distribution
    
      # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Linux Base Packages for the following distributions:
# - Amazon Linux
# - RedHat Enterprise Linux
# - CentOS
# - Rocky Linux

# Note: EPEL repo (or equivalent) is enabled when applicable

# /!\ ATTENTION /!\
# Changing anything beyond this line could cause your SOCA environment to become unstable/crash
# If you want to add new packages:
# Option 1 - Edit the USER_EXTRA_PKGS on system_packages/user_extra_packages.sh.j2 (apply to all nodes type, executed at the beginning of the boostrap phase)
# Option 2 - Edit cluster_node_bootstrap/compute_node/04_setup_user_customization.sh.j2 to apply logic for each node type (executed at the end of the boostrap phase)

# (DO NOT MODIFY) Packages installed on ALL SOCA Nodes
SYSTEM_PKGS=(
  adcli
  authselect-compat
  autoconf
  automake
  avahi-libs
  bind-libs
  bind-libs-lite
  bind-license
  bind-utils
  bzip2
  bzip2-devel
  bzip2-libs
  c-ares
  chrony
  compat-openldap
  cmake3
  cpp
  cronie
  cups-libs
  cyrus-sasl
  cyrus-sasl-devel
  cyrus-sasl-gssapi
  dejavu-fonts-common
  dejavu-sans-fonts
  e2fsprogs
  e2fsprogs-libs
  elfutils-libelf-devel
  expat-devel
  fontconfig
  fontpackages-filesystem
  freetype
  gcc
  gcc-c++
  gcc-gfortran
  git
  glibc
  glibc-common
  glibc-devel
  glibc-headers
  gssproxy
  htop
  http-parser
  hwloc
  hwloc-devel
  hwloc-libs
  jq
  kernel
  kernel-devel
  kernel-headers
  keyutils
  keyutils-libs-devel
  krb5-devel
  krb5-libs
  krb5-workstation
  libICE
  libSM
  libX11
  libX11-common
  libX11-devel
  libXau
  libXext
  libXft
  libXrender
  libXt-devel
  libbasicobjects
  libcollection
  libcom_err
  libcom_err-devel
  libdhash
  libedit-devel
  libevent
  libffi-devel
  libgcc
  libgfortran
  libglvnd-devel
  libgomp
  libical libical-devel
  libini_config
  libipa_hbac
  libkadm5
  libldb
  libmpc
  libnfsidmap
  libpath_utils
  libpng
  libref_array
  libselinux
  libselinux-devel
  libselinux-python
  libselinux-utils
  libsepol
  libsepol-devel
  libsmbclient
  libss
  libsss_autofs
  libsss_certmap
  libsss_idmap
  libsss_nss_idmap
  libsss_sudo
  libstdc++
  libstdc++-devel
  libtalloc
  libtdb
  libtevent
  libtirpc
  libtool
  libtool-ltdl
  libverto-devel
  libverto-tevent
  libwbclient
  libxcb
  lshw
  lzma
  make
  mdadm
  mpfr
  ncurses-devel
  nfs-utils
  nss-pam-ldapd
  nvme-cli
  oddjob
  oddjob-mkhomedir
  openldap
  openldap-clients
  openldap-compat
  openldap-devel
  openssl
  openssl-devel
  openssl-libs
  pcre
  pcre-devel
  perl
  perl-Carp
  perl-Encode
  perl-Env
  perl-Exporter
  perl-File-Path
  perl-File-Temp
  perl-Filter
  perl-Getopt-Long
  perl-HTTP-Tiny
  perl-PathTools
  perl-Pod-Escapes
  perl-Pod-Perldoc
  perl-Pod-Simple
  perl-Pod-Usage
  perl-Scalar-List-Utils
  perl-Socket
  perl-Storable
  perl-Switch
  perl-Text-ParseWords
  perl-Time-HiRes
  perl-Time-Local
  perl-constant
  perl-libs
  perl-macros
  perl-parent
  perl-podlators
  perl-threads
  perl-threads-shared
  postgresql
  postgresql-contrib
  postgresql-devel
  postgresql-libs
  postgresql-server
  python-sssdconfig
  python3
  python3-devel
  python3-pip
  quota
  quota-nls
  readline-devel
  realmd
  redhat-lsb
  rpcbind
  rpm-build
  rsyslog
  samba-client-libs
  samba-common
  samba-common-libs
  samba-common-tools
  sqlite-devel
  sssd
  sssd-ad
  sssd-client
  sssd-common
  sssd-common-pac
  sssd-ipa
  sssd-krb5
  sssd-krb5-common
  sssd-ldap
  sssd-proxy
  swig
  system-lsb
  systemd-devel
  tcl
  tcl-devel
  tcp_wrappers
  telnet
  tk
  tk-devel
  unixODBC
  unixODBC-devel
  vim
  wget
  xz
  xz-devel
  zlib
  zlib-devel
)

log_info "Customizing Linux packages installation  for RHEL 9"
dnf config-manager --set-enabled codeready-builder-for-rhel-9-rhui-rpms

# Packages not available or with a different name in this distro
REMOVE_PKGS=(
  libselinux-python
  libverto-tevent
  system-lsb
  redhat-lsb
  dejavu-fonts-common
  python-sssdconfig
  compat-openldap
)

# New packages to add (specific to this distro)
ADD_PKGS=(
  python3-libselinux
  python3-sss
  ec2-hibinit-agent
)

log_info "Removing packages for RHEL9: ${REMOVE_PKGS[*]}"
log_info "Adding extra packages for RHEL9: ${ADD_PKGS[*]}"

    

    # Add distro specific packages and ensure uniqueness
    SYSTEM_PKGS=($(printf '%s\n' "${SYSTEM_PKGS[@]}" "${ADD_PKGS[@]}" | sort | uniq))

    # Avoid kernel update is Lustre is on the mount table as lustre-client is kernel specific.
    if cat /etc/fstab | grep -q lustre; then
      log_info "Lustre filesystem found in /etc/fstab. Removing kernel from package update to avoid version mismatch with lustre-client version"
      REMOVE_PKGS+=(kernel)
    fi

    # Ensure packages in REMOVE_PKGS won't be installed
    for pkg_to_remove in "${REMOVE_PKGS[@]}"; do
      SYSTEM_PKGS=($(printf '%s\n' "${SYSTEM_PKGS[@]}" | grep -vE "^${pkg_to_remove}$"))
      USER_EXTRA_PKGS=($(printf '%s\n' "${USER_EXTRA_PKGS[@]}" | grep -vE "^${pkg_to_remove}$"))
    done

    # Proceed to the actual installation
    packages_install ${SYSTEM_PKGS[@]} ${USER_EXTRA_PKGS[@]}

    # Create file to bypass package installation if we create an AMI from this machine
    touch ${PACKAGES_ALREADY_INSTALLED_FILE_LOCK}

    # Post Install commands
    
      systemctl enable hibinit-agent
    

  else
    log_info "Existing Package log ${PACKAGES_ALREADY_INSTALLED_FILE_LOCK} found. Bypassing package installation steps. Remove this file if you have modified the list of package to install"
  fi
  log_info "End: Install/Update Required Linux Packages"
}
system_packages_install
# End: Install/Update Required Linux Packages

# Install SOCA Python
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin: Install Python on the Controller Host
# This function install SOCA python. It's only executing by the Controller Host during the first boot.
# SOCA python is the backbone of SOCA, responsible to run all scripts under cluster_manager, cluster_analytics, cluster_web_ui etc ...
# It's not recommended to change this template

function install_soca_python () {
  log_info "Installing SOCA Python"
  mkdir -p "${SOCA_BOOTSTRAP_ASSETS_FOLDER}/soca_python"
  pushd "${SOCA_BOOTSTRAP_ASSETS_FOLDER}/soca_python"
  local PYTHON_VERSION="3.9.21"
  local PYTHON_URL="https://www.python.org/ftp/python/3.9.21/Python-3.9.21.tgz"
  local PYTHON_SHA256="667c3ba2ca98d39ead1162f6548c3475768582e2ff89e0821d25eb956ac09944"
  local PYTHON_INSTALLED_VERS=$(/apps/soca/"soca-rhel12"/python/latest/bin/python3 --version | awk {'print $NF'})

  if [[ "${PYTHON_INSTALLED_VERS}" != "${PYTHON_VERSION}" ]]; then
    log_info "SOCA Python not detected, installing"
    mkdir -p "soca-rhel12"/python/installer
    pushd "soca-rhel12"/python/installer
    file_download --download-url="${PYTHON_URL}" --save-as="python3_soca_installer.tgz" --sha256-checksum="${PYTHON_SHA256}"
    tar xvf "python3_soca_installer.tgz" --strip-components=1 -C .
    if ! ./configure CXX="g++" \
      LDFLAGS="-L/usr/lib64/openssl" \
      CPPFLAGS="-I/usr/include/openssl" \
      -enable-loadable-sqlite-extensions \
      --prefix="/apps/soca/soca-rhel12/python/${PYTHON_VERSION}" \
      --enable-optimizations; then
        exit_fail "Unable to run './configure' for SOCA_PYTHON. Check bootstrap logs."
    fi

    if ! make -j$(nproc); then
      exit_fail "Unable to run 'make' for SOCA_PYTHON. Check bootstrap logs."
    fi

    if ! make install -j$(nproc); then
       exit_fail "Unable to run 'make install' for SOCA_PYTHON. Check bootstrap logs."
    fi

    popd
    popd
    ln -sf "/apps/soca/soca-rhel12/python/${PYTHON_VERSION}" "/apps/soca/soca-rhel12/python/latest"
  else
    log_info "Python already installed and at correct version (${PYTHON_VERSION})."
  fi

  # Install Python required libraries
  echo "apscheduler==3.10.4
tzlocal==5.2
asn1crypto==1.5.1
boto3==1.36.2
botocore==1.36.2
cachetools==5.3.3
cffi==1.16.0
cfn-flip==1.3.0
Click==8.1.7
colorama==0.4.6
cryptography==42.0.8
docutils==0.21.2
ecdsa==0.19.0
Flask==2.2.5
flask-apscheduler==1.12.4
flask-restful==0.3.9
flask-restful-swagger-3==0.5.1
Flask-Session==0.4.1
Flask-SQLAlchemy==2.5.1
flask-swagger==0.2.14
flask-debugtoolbar==0.13.1
Flask-WTF==1.1.1
gunicorn==22.0.0
itsdangerous==2.2.0
Jinja2==3.1.5
jmespath==1.0.1
ldif==4.2.5
MarkupSafe==2.1.5
natsort==8.4.0
prettytable==3.10.0
pyasn1==0.6.0
pyasn1-modules==0.4.0
pycparser==2.22
pyOpenSSL==24.1.0
python-dateutil==2.9.0.post0
python-jose==3.3.0
python-ldap==3.4.4
python-pam==2.0.2
pytz==2024.1
PyYAML==6.0.1
requests==2.32.3
requests-aws4auth==1.2.3
rsa==4.9
redis[hiredis]==5.0.6
s3transfer
six==1.16.0
SQLAlchemy==1.3.15
swagger-ui-py==23.9.23
troposphere==4.8.0
urllib3==1.26.19
uwsgi==2.0.26
uwsgitop==0.12
Werkzeug==2.3.8
WTForms==3.1.2
opensearch-py==2.3.2
elasticsearch==7.17.9
Jinja2==3.1.5" > requirements.txt

  if ! /apps/soca/soca-rhel12/python/${PYTHON_VERSION}/bin/pip3 install -r requirements.txt; then
    exit_fail "Unable to install SOCA Python requirements (see templates/linux/soca_python_requirements.txt.j2)"
  fi

  popd
  log_info "Python and relevant dependency installed"
}
install_soca_python

# End: : Install Python on the Controller Host

# Retrieve the region of the bucket specified at install time

  S3_BUCKET_REGION=$(curl -s --head socamcrozes.s3.amazonaws.com | grep bucket-region | awk '{print $2}' | tr -d '\r\n')


# Retrieve SOCA configuration under soca.tar.gz and extract it on /apps/
aws_cli s3 --region ${S3_BUCKET_REGION} cp s3://socamcrozes/soca-rhel12/soca.tar.gz ${SOCA_BOOTSTRAP_ASSETS_FOLDER}

# Download codebase, temp extract on root just to retrieve j2generator
tar -xvf ${SOCA_BOOTSTRAP_ASSETS_FOLDER}/soca.tar.gz -C /apps/soca/soca-rhel12 --no-same-owner
mkdir -p /apps/soca/soca-rhel12/cluster_manager/orchestrator/logs

# Apply permissions
chmod -R 600 /apps/soca/soca-rhel12/cluster_manager/
chmod -R 600 /apps/soca/soca-rhel12/cluster_node_bootstrap/
chmod -R 600 /apps/soca/soca-rhel12/cluster_hooks/
chmod -R 600 /apps/soca/soca-rhel12/resources/
chmod -R 655 /apps/soca/soca-rhel12/python/
chmod +x /apps/soca/soca-rhel12/cluster_manager/orchestrator/socaqstat.py
chmod +x /apps/soca/soca-rhel12/cluster_manager/tools/j2generator/j2generator.sh
chmod +x /apps/soca/soca-rhel12/cluster_manager/socactl

# Download Setup.sh Jinja template
aws_cli s3 --region ${S3_BUCKET_REGION} cp s3://socamcrozes/soca-rhel12/config/do_not_delete/user_data/controller/03_setup.sh.j2 ${SOCA_BOOTSTRAP_ASSETS_FOLDER}

# Wait until all parameters have been added to CDK
while ! aws_cli ssm get-parameter --name "/soca/soca-rhel12/cdk_completed" > /dev/null 2>&1; do
    log_info "/soca/soca-rhel12/cdk_completed not found on SSM, CDK & CloudFormation are probably still in creation, waiting a little longer"
    sleep 120
done

# Prepare the final setup phase now that all resources are fully available from SSM
source /etc/environment

# Generate the final Setup Script
/bin/bash /apps/soca/soca-rhel12/cluster_manager/tools/j2generator/j2generator.sh --get-template "03_setup.sh.j2" \
    --output-file "${SOCA_BOOTSTRAP_ASSETS_FOLDER}/03_setup.sh" \
    --ssm-key "/" \
    --add-value "KEY=/job/NodeType VALUE=controller TYPE=str" \
    --template-dirs "/apps/soca/soca-rhel12/cluster_node_bootstrap/" \
    --template-dirs "${SOCA_BOOTSTRAP_ASSETS_FOLDER}"

/bin/bash ${SOCA_BOOTSTRAP_ASSETS_FOLDER}/03_setup.sh >> ${SOCA_BOOTSTRAP_LOGS_FOLDER}/03_setup.sh.log 2>&1

