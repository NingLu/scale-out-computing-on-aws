#!/bin/bash -xe

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Note: This file is generated by CDK during SOCA install.
# Not all resources are available here (e.g /configuration/ControllerPrivateDnsName won't exist when this file is created)
# All SOCA resources will be available on 03_setup.sh

# This file exist as the 01_user_data.sh is limited in size (16Kb)
# and we can't invoke 03_setup.sh.j2 directly from CDK as not all AWS resources are available.

# Load common function such as logging, awscli wrapper
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin: Log Functions. Added via common.j2
function log_debug() {
  log_wrapper "DEBUG" "${@}"
}

function log_info() {
  log_wrapper "INFO" "${@}"
}

function log_warning() {
  log_wrapper "WARNING" "${@}"
}

function log_error() {
  log_wrapper "ERROR" "${@}"
}

function exit_fail () {
  log_wrapper "FATAL" "${@}"
  exit 1
}

function log_wrapper() {
  # To avoid issue with native echo and log_info in function (both write to stdout), we are redirecting log_info to stderr
  # we use echo to return function output from specific functions
  local LOG_LEVEL="$1"
  shift
  local VALID_LOG_LEVELS=("INFO" "DEBUG" "WARNING" "ERROR" "FATAL")
  if [[ ! "${VALID_LOG_LEVELS[*]}" =~ "${LOG_LEVEL}" ]]; then
    echo "[$(date +"%Y-%m-%d %H:%M:%S,%3N")] [INVALID] Invalid log level: ${LOG_LEVEL}, Call log_debug log_info log_warning log_error or exit_fail directly." >&2
    exit 1
  fi

  local LOG_MESSAGE="[$(date +"%Y-%m-%d %H:%M:%S,%3N")] [${LOG_LEVEL}] ${@}"
  if [[ -n "${SOCA_BOOTSTRAP_LOGS_FOLDER}" ]] && [[ -d "${SOCA_BOOTSTRAP_LOGS_FOLDER}" ]]; then
    # Keep track of warning/fatal/error on stdout as well as separate files
    if [[ ${LOG_LEVEL} == "WARNING" ]] || [[ ${LOG_LEVEL} == "FATAL" ]] || [[ ${LOG_LEVEL} == "ERROR" ]]; then
      echo "${LOG_MESSAGE}" | tee -a "${SOCA_BOOTSTRAP_LOGS_FOLDER}/bootstrap_${LOG_LEVEL}.log" >&2
    else
      echo "${LOG_MESSAGE}" >&2
    fi
  else
    # Handle case where SOCA_BOOTSTRAP_LOGS_FOLDER is not set
    echo "${LOG_MESSAGE}" >&2
  fi
}
# End: Log Functions

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin: File Downloader (HTTP and S3) Added via common.j2
function file_download() {

  # file_download --download-url="https://link/file.txt" --save-as="file.txt" <-- will download from internet via https
  # file_download --download-url="s3://mybucket/file.txt" --save-as="file.txt"  <-- will download from s3 via awscli
  # Optional: Specify --sha256-checksum to verify data integrity
  # Optional: Specify --wget-options to add any addition options (note: --quiet is enabled by default)

  local DOWNLOAD_URL
  local SAVE_AS
  local SHA256_CHECKSUM_EXPECTED
  local SHA256_CHECKSUM_FOUND
  local WGET_OPTIONS
  local DOWNLOAD_TYPE
  log_info "Detected file_download request with args: ${*}"

  for arg in "$@"; do
    case $arg in
      --download-url=*) DOWNLOAD_URL="${arg#*=}" ;;
      --save-as=*) SAVE_AS="${arg#*=}" ;;
      --sha256-checksum=*) SHA256_CHECKSUM_EXPECTED="${arg#*=}" ;;
      --wget-options=*) WGET_OPTIONS="${arg#*=}" ;;
      *) exit_fail "Unknown arg ${arg} for file_download";;
    esac
  done

  if [[ ${DOWNLOAD_URL} =~ ^s3://$ ]]; then
      log_info "${DOWNLOAD_URL} seems to be a S3 URL"
      DOWNLOAD_TYPE="s3"
  else
       log_info "${DOWNLOAD_URL} seems to be an HTTP URL"
      DOWNLOAD_TYPE="http"
  fi

  if [[ -z ${DOWNLOAD_URL} ]]; then
    exit_fail " --download-url  not found for file_download"
  fi

  if [[ -z ${SAVE_AS} ]]; then
    exit_fail "SAVE_AS not found, for file_download. Please specify --save-as"
  fi

  if [[ ${DOWNLOAD_TYPE} == "http" ]]; then
    # HTTP
    if ! verify_package_installed wget; then
      packages_install wget
    fi

    # note: Do not add WGET_OPTIONS between quotes to avoid them being treated as string
    if wget --quiet ${WGET_OPTIONS} "${DOWNLOAD_URL}" -O "${SAVE_AS}"; then
      log_info "${DOWNLOAD_URL} downloaded successfully and saved as ${SAVE_AS}"
    else
      exit_fail "Error downloading [${DOWNLOAD_URL}] wget returned an error, check the logs for more details"
    fi

  else
    # S3
    local S3_ACTION

    if [[ "${DOWNLOAD_URL}" =~ /$ ]]; then
        log_info "${DOWNLOAD_URL} ends with /, using s3 sync"
        S3_ACTION="sync"
    else
        log_info "${DOWNLOAD_URL} does not ends with /, using s3 cp"
        S3_ACTION="cp"
    fi

    if aws_cli s3 ${S3_ACTION} ${DOWNLOAD_URL} ${SAVE_AS} --quiet; then
      log_info "${DOWNLOAD_URL} downloaded successfully and saved as ${SAVE_AS}"
    else
      exit_fail "Error downloading ${DOWNLOAD_URL}. aws_cli returned an error"
    fi
  fi

  # If --sha256-checksum is provided, proceed to an integrity check
  if [[ -n ${SHA256_CHECKSUM_EXPECTED} ]]; then
    log_info "--sha256-checksum found, verifying file"
    SHA256_CHECKSUM_FOUND=$(sha256sum "${SAVE_AS}" | awk '{print $1}')
    if [[ "${SHA256_CHECKSUM_FOUND}" != "${SHA256_CHECKSUM_EXPECTED}" ]];  then
      exit_fail "Checksum for ${DOWNLOAD_URL} failed. Expected SHA256 ${SHA256_CHECKSUM_EXPECTED}, but found ${SHA256_CHECKSUM_FOUND} File may be compromised."
    else
      log_info "Checksum verified: Expected SHA256 ${SHA256_CHECKSUM_EXPECTED}, found ${SHA256_CHECKSUM_FOUND}"
    fi
  fi
}
# End: File Downloader

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# These functions are available on all services (controller, compute node, login node, scheduler ...) via `common.sh.j2`
# Always use theses function when interacting with system packages.

function packages_remove () {
  # Remove specified packages (e.g: packages_remove pkg1 pkg2 ... pkgN)
  if [[ $# -eq 0 ]]; then
    exit_fail "packages_remove - No package list specified. Exiting... "
  fi

  
    packages_exec_command yum remove -y "${@}"
  
}

function packages_install () {
  # Install specified packages (e.g: packages_install pkg1 pkg2 ... pkgN)
  if [[ $# -eq 0 ]]; then
    exit_fail "packages_install - No package list specified. Exiting... "
  fi

  
    packages_exec_command yum install -y "${@}"
  
}

function verify_package_installed () {
  # Return "true" is a given package is installed (e.g: verify_package_installed pkg_name)
  if [[ $# -eq 0 ]]; then
    exit_fail "verify_package_installed - No package list specified. Exiting... "
  fi

  
    rpm -q ${1} &> /dev/null && return 0 || return 1
  
}

function packages_clean () {
  # Remove un-necessary packages
  
    packages_exec_command yum clean all
  
}

function packages_generic_command() {
  # generic wrapper for commands other than install/remove
  
    packages_exec_command yum "${@}"
  
}

function packages_exec_command () {
  # wrapper for all exec commands
  local MAX_ATTEMPTS=10
  local ATTEMPT_NUMBER=1
  local SLEEP_TIME_SECONDS=60
  local EXEC_COMMAND=("$@")
  log_info "Attempting to run ${EXEC_COMMAND[@]}"
  while [[ ${ATTEMPT_NUMBER} -le ${MAX_ATTEMPTS} ]]; do
    log_info "Attempt ${ATTEMPT_NUMBER}/${MAX_ATTEMPTS})"
    "${EXEC_COMMAND[@]}"
    if [[ $? -eq 0 ]]; then
      log_info "Command successful after: ${ATTEMPT_NUMBER}/${MAX_ATTEMPTS} attempts"
      return 0
    else
      log_error "${EXEC_COMMAND[@]} failed on Attempt ${ATTEMPT_NUMBER}/${MAX_ATTEMPTS}. Will try again in ${SLEEP_TIME_SECONDS} seconds"
      sleep ${SLEEP_TIME_SECONDS}
      ((ATTEMPT_NUMBER++))
    fi
  done
  exit_fail "${EXEC_COMMAND[@]} failed after all attempts, exiting .."
}

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin: Reboot management. Added via common.sh.j2
function unset_reboot_required () {
  echo -n "no" > /root/.soca_reboot_required.txt
}

function set_reboot_required () {
  log_info "[REBOOT REQUIRED]: ${1}"
  echo -n "yes" > /root/.soca_reboot_required.txt
}

function get_reboot_required () {
  if [[ -f /root/.soca_reboot_required.txt ]]; then
    cat /root/.soca_reboot_required.txt
  else
     echo -n "no"
  fi
}
# End: Reboot Management

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin - Wrapper AWSCLI. Added via common.sh.j2
function aws_cli () {
  local AWS=$(command -v aws)

  # Will verify if the output of the command to run is on the cache
  local CHECK_CACHE="true"
  local CACHED_RESULT

  # Automatically add --region if not specified
  if [[ "$*" == *"--region"* ]]; then
    local AWS_API_CALL="${AWS} $*"
  else
    local AWS_API_CALL="${AWS} --region eu-west-3 $*"
  fi

  # Do not check cache_get_key for any query specific to secretsmanager as cache_get_key has a dependency with aws_cli
  # and will cause circular dependency errors. Moreover, secrets must not be cached on ElastiCache.
  if [[ "$*" == "secretsmanager"* ]]; then
    CHECK_CACHE="false"
  fi

  # Check if this API call has already been executed previously and results are available on ElastiCache
  if [[ "${CHECK_CACHE}" == "true" ]]; then
    # cache_get_key is not available on User Data and imported via cache_client.sh.j2
    if declare -F cache_get_key > /dev/null; then
      CACHED_RESULT=$(cache_get_key "${AWS_API_CALL}")
      if [[ ${CACHED_RESULT} == "CACHE_MISS" ]]; then
        # Key does not exist on ElastiCache, run actual API call
        ${AWS_API_CALL}
      else
        echo -n ${CACHED_RESULT}
      fi
    else
      # cache_get_key function does not exist, import it via cache_client.sh.j2, default actual API call.
      ${AWS_API_CALL}
    fi
  else
    # bypass cache, run actual API call
    ${AWS_API_CALL}
  fi

}
# End - Wrapper AWSCLI

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin - Wrapper EC2. Added via common.sh.j2
function ec2_describe_instance_types () {
  # Wrapper for ec2 describe-instance-types
  # ex:
  # describe_instance_types "GpuInfo.Gpus[].Manufacturer"
  # describe_instance_types "InstanceType"

  local PARAMETER="${1}"
  local INSTANCE_INFO
  local CACHED_RESULT
  local INSTANCE_TYPE=$(instance_type)

  if [[ -z ${PARAMETER} ]]; then
    local JQ_QUERY=".InstanceTypes[]"
  else
    local JQ_QUERY=".InstanceTypes[].${PARAMETER}"
  fi

  INSTANCE_INFO=$(aws_cli ec2 describe-instance-types --instance-types "${INSTANCE_TYPE}" --output json)
  echo -n ${INSTANCE_INFO} | jq -r "${JQ_QUERY}  // empty" 2>/dev/null || echo -n ""
}
# End - Wrapper EC2

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin - Wrapper IMDS. Added via common.sh.j2
function imds_get () {
  local SLASH=''
  local IMDS_HOST="http://169.254.169.254"
  local IMDS_TTL="300"
  # prepend a slash if needed
  if [[ "${1:0:1}" == '/' ]]; then
    SLASH=''
  else
    SLASH='/'
  fi
  local URL="${IMDS_HOST}${SLASH}${1}"

  # Get an Auth token
  local TOKEN=$(curl --silent -X PUT "${IMDS_HOST}/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: ${IMDS_TTL}")

  # Get the requested value and echo it back
  local OUTPUT=$(curl --silent -H "X-aws-ec2-metadata-token: ${TOKEN}" "${URL}")
  echo -n "${OUTPUT}"
}

function instance_type () {
  echo -n $(imds_get /latest/meta-data/instance-type)
}

function instance_family () {
  echo -n  $(imds_get /latest/meta-data/instance-type | cut -d. -f1)
}

function instance_id () {
  echo -n $(imds_get /latest/meta-data/instance-id)
}

function instance_region () {
  echo -n $(imds_get /latest/meta-data/placement/region)
}

function instance_az () {
  echo -n $(imds_get /latest/meta-data/placement/availability-zone)
}
# End - Wrapper IMDS

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin - Wrapper for Secrets Manager. Added via common.sh.j2
function get_secret() {
    local SECRET_NAME="${1}"
    local MAX_ATTEMPT=10
    local CURRENT_ATTEMPT=0
    local SLEEP_INTERVAL=180

    if ! verify_package_installed jq; then
      packages_install jq
    fi

    local JQ=$(which jq)
    while ! secret=$(aws_cli secretsmanager get-secret-value --secret-id "${SECRET_NAME}" --query SecretString --output json); do
        ((CURRENT_ATTEMPT=CURRENT_ATTEMPT+1))
        if [[ ${CURRENT_ATTEMPT} -ge ${MAX_ATTEMPT} ]]; then
            exit_fail "error: Timed out waiting for secret ${SECRET_NAME} from secrets manager"
        fi
        log_info "Secret Manager is not ready yet for ${SECRET_NAME} ... Waiting ${SLEEP_INTERVAL} s... Loop count is: ${CURRENT_ATTEMPT}/${MAX_ATTEMPT}"
        sleep ${SLEEP_INTERVAL}
    done
    echo -n ${secret}
}
# End - Wrapper for Secrets Manager

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin - Setup /etc/environment
function set_environment_variable () {
  local VARIABLE_NAME=${1}
  local VARIABLE_VALUE=${2}
  local SOCA_IDENTIFIER="# SOCA Environment Variable, [SOCA_DO_NOT_DELETE]" # added to each entry

  if [[ -z ${VARIABLE_NAME} ]]; then
    exit_fail "set_environment_variable. VARIABLE_NAME (first argument) not found"
  fi
  if [[ -z ${VARIABLE_VALUE} ]]; then
    exit_fail "set_environment_variable. VARIABLE_VALUE (second argument) not found"
  fi
  log_info "Setting ${VARIABLE_NAME}=${VARIABLE_VALUE} to /etc/environment"
  if grep -q "^[^#]*${VARIABLE_NAME}=${VARIABLE_VALUE}" /etc/environment; then
      log_info "${VARIABLE_NAME}=${VARIABLE_VALUE} already found in  /etc/environment, ignoring ..."
  else
      if grep -q "^[^#]*${VARIABLE_NAME}=" /etc/environment; then
        log_info "${VARIABLE_NAME}= found but not pointing to ${VARIABLE_VALUE}, remove the line ... "
        sed -i "/^[^#]*${VARIABLE_NAME}=/d" /etc/environment
      fi
      log_info "Adding ${VARIABLE_NAME}=${VARIABLE_VALUE} to /etc/environment"
      {
        printf "${SOCA_IDENTIFIER}\nexport ${VARIABLE_NAME}=${VARIABLE_VALUE}\n"
      } >> /etc/environment
  fi
  # Reload your env
  source /etc/environment
}
# End - Setup /etc/environment


export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/pbs/bin:/opt/pbs/sbin:/opt/soca/soca-demoparis:${PATH}

# Source environment
source /etc/environment

# Source SOCA_PYTHON if exist
SOCA_PYTHON_ENV_PATH="/opt/soca/soca-demoparis/python/latest/soca_python.env"

if [[ -f "${SOCA_PYTHON_ENV_PATH}" ]]; then
    source "${SOCA_PYTHON_ENV_PATH}"
fi

# Verify previous SOCA Bootstrap lock presence
if [[ -f "/root/.soca_bootstrap_controller_soca-demoparis_completed" ]]; then
  exit_fail "/root/.soca_bootstrap_controller_soca-demoparis_completed already exist. To prevent configuration overwrite, we exit the script, since this machine seems to be already configured"
fi

log_info "Pre-Requisite Start Date: $(date)"

# Set Environment variables
set_environment_variable "AWS_DEFAULT_REGION" "eu-west-3"
set_environment_variable "SOCA_BOOTSTRAP_ASSETS_FOLDER" "/root/soca_bootstrap_$(instance_id)"
set_environment_variable "SOCA_BOOTSTRAP_LOGS_FOLDER" "/root/soca_bootstrap_$(instance_id)/logs"
set_environment_variable "SOCA_NODE_TYPE" "controller"
set_environment_variable "SOCA_CLUSTER_ID" "soca-demoparis" # needed for Logs backup
set_environment_variable "SOCA_INSTALL_BUCKET" "socamcrozes-us-west-2" # needed for Logs backup
set_environment_variable "SOCA_VERSION" "25.5.0" # needed for Logs backup
set_environment_variable "SOCA_HOME" "/opt/soca/soca-demoparis"
set_environment_variable "SOCA_BOOTSTRAP_LOGS" "/apps/soca/soca-demoparis/shared/logs/bootstrap/"

# Create $SOCA_HOME if needed
mkdir -p ${SOCA_HOME}



# Retrieve the region of the bucket specified at install time

  S3_BUCKET_REGION=$(curl -s --head socamcrozes-us-west-2.s3.amazonaws.com | grep bucket-region | awk '{print $2}' | tr -d '\r\n')


# Retrieve SOCA configuration under soca.tar.gz and extract it on /opt/soca/
aws_cli s3 --region ${S3_BUCKET_REGION} cp s3://socamcrozes-us-west-2/soca-demoparis/soca.tar.gz ${SOCA_BOOTSTRAP_ASSETS_FOLDER}

# Download codebase, temp extract on root just to retrieve j2generator
tar -xvf ${SOCA_BOOTSTRAP_ASSETS_FOLDER}/soca.tar.gz -C /opt/soca/soca-demoparis --no-same-owner
mkdir -p /opt/soca/soca-demoparis/cluster_manager/orchestrator/logs

# Apply permissions
chmod -R 600 /opt/soca/soca-demoparis/

# Set up executable flag
chmod +x /opt/soca/soca-demoparis/cluster_manager/orchestrator/socaqstat.py
chmod +x /opt/soca/soca-demoparis/cluster_manager/tools/j2generator/j2generator.sh
chmod +x /opt/soca/soca-demoparis/cluster_manager/socactl
chmod +x /opt/soca/soca-demoparis/cluster_manager/analytics/wrapper.sh

# Install SQLite (deps for SOCA Python)
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin: Configure SQLite
function install_sqlite () {
  log_info "Begin: Install SQLite"
  local SQLITE_VERSION="3.49.1"
  local SQLITE_URL="https://www.sqlite.org/2025/sqlite-src-3490100.zip"
  local SQLITE_SHA256="4404d93cbce818b1b98ca7259d0ba9b45db76f2fdd9373e56f2d29b519f4d43b"
  local SQLITE_INSTALL_PREFIX="/opt/soca/soca-demoparis/packages/sqlite"
  if [[ $(${SQLITE_INSTALL_PREFIX}/bin/sqlite3 --version | awk {'print $1'}) == "${SQLITE_VERSION}" ]]; then
    log_info "SQLITE3 exist and is at correct version, skipping ..."
  else
    mkdir -p "${SOCA_BOOTSTRAP_ASSETS_FOLDER}/sqlite"
    pushd "${SOCA_BOOTSTRAP_ASSETS_FOLDER}/sqlite"
    if ! file_download --download-url="${SQLITE_URL}" --save-as="sqlite_installer_${SQLITE_VERSION}.zip" --sha256-checksum="${SQLITE_SHA256}"; then
      exit_fail "Unable to download SQLite"
    fi
    unzip "sqlite_installer_${SQLITE_VERSION}.zip" -d sqlite_installer
    pushd sqlite_installer/*/
    # -all
    # Feature flags...
    # + fts4
    # + fts5
    # + geopoly
    # + rtree
    # + session
    # - update-limit
    # - memsys5
    # - memsys3
    # - scanstatus
    # + json

    # DSQLITE_THREADSAFE=2 - Enable multi-thread https://www.sqlite.org/compile.html#threadsafe

    ./configure CFLAGS="-DSQLITE_THREADSAFE=2" --prefix="${SQLITE_INSTALL_PREFIX}" --all
    make -j $(nproc)
    make install
    echo "${SQLITE_INSTALL_PREFIX}/lib" > /etc/ld.so.conf.d/99-soca-demoparis-sqlite.conf
    if ! ldconfig; then
      exit_fail "SQLite installed but unable to update ldconfig. Check bootstrap logs"
    fi
    popd
  fi
}
install_sqlite
# End: Configure SQLite

# Install SOCA Python
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

function install_soca_python () {
  log_info "Installing SOCA Python"
  mkdir -p "${SOCA_BOOTSTRAP_ASSETS_FOLDER}/soca_python"
  pushd "${SOCA_BOOTSTRAP_ASSETS_FOLDER}/soca_python"
  local PYTHON_VERSION="3.13.2"
  local PYTHON_URL="https://www.python.org/ftp/python/3.13.2/Python-3.13.2.tgz"
  local PYTHON_SHA256="b8d79530e3b7c96a5cb2d40d431ddb512af4a563e863728d8713039aa50203f9"
  local SOCA_PYTHON_LOCAL_INSTALL_PREFIX="/opt/soca/soca-demoparis/python/${PYTHON_VERSION}/$(uname -m)/amazonlinux2023"
  local SOCA_PYTHON_VENV="${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}/soca-python-virtual-env"
  local SOCA_PYTHON_SITE_PACKAGES

  if [[ $(${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}/bin/python3 --version | awk {'print $NF'}) == "${PYTHON_VERSION}" ]]; then
    log_info "Local SOCA_PYTHON ${SOCA_PYTHON_LOCAL_INSTALL_PREFIX} found and at correct version, skipping SOCA_PYTHON Install"

  else

    

    log_info "Local SOCA_PYTHON ${SOCA_PYTHON_LOCAL_INSTALL_PREFIX} not found, installing it"
    mkdir -p ${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}
    log_info "${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}/bin/python3 not detected or at wrong version, installing Python ${PYTHON_VERSION}"
    mkdir -p "soca-demoparis"/python/installer
    pushd "soca-demoparis"/python/installer
    file_download --download-url="${PYTHON_URL}" --save-as="python3_soca_installer.tgz" --sha256-checksum="${PYTHON_SHA256}"
    tar xvf "python3_soca_installer.tgz" --strip-components=1 -C .

    
      # Full-featured Python build for controller nodes
      local CXX="g++"
      local PKG_CONFIG_PATH="/opt/soca/soca-demoparis/packages/sqlite/lib/pkgconfig:$PKG_CONFIG_PATH"
      local CPPFLAGS="-I/opt/soca/soca-demoparis/packages/sqlite/include"
      local LDFLAGS="-L/opt/soca/soca-demoparis/packages/sqlite/lib"
      local ADDITIONAL_ARGS=""

      

      local PYTHON_CONFIGURE_CMD="./configure"
      PYTHON_CONFIGURE_CMD+=" CXX=\"${CXX}\""
      PYTHON_CONFIGURE_CMD+=" PKG_CONFIG_PATH=\"${PKG_CONFIG_PATH}\""
      PYTHON_CONFIGURE_CMD+=" CPPFLAGS=\"${CPPFLAGS}\""
      PYTHON_CONFIGURE_CMD+=" LDFLAGS=\"${LDFLAGS}\""
      PYTHON_CONFIGURE_CMD+=" --enable-loadable-sqlite-extensions"
      PYTHON_CONFIGURE_CMD+=" --prefix=\"${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}\""
      PYTHON_CONFIGURE_CMD+=" --enable-shared"
      PYTHON_CONFIGURE_CMD+=" --enable-optimizations"
      PYTHON_CONFIGURE_CMD+=" --with-lto"
      PYTHON_CONFIGURE_CMD+=" --with-ensurepip=install"
      PYTHON_CONFIGURE_CMD+=" ${ADDITIONAL_ARGS}"

      if ! eval ${PYTHON_CONFIGURE_CMD}; then
        exit_fail "Unable to run [${PYTHON_CONFIGURE_CMD}] for SOCA_PYTHON. Check bootstrap logs."
      fi

    

    if ! make -j$(nproc); then
      exit_fail "Unable to run 'make' for SOCA_PYTHON. Check bootstrap logs."
    fi

    if ! make install -j$(nproc); then
       exit_fail "Unable to run 'make install' for SOCA_PYTHON. Check bootstrap logs."
    fi

    log_info "Creating symlink /opt/soca/soca-demoparis/python/latest pointing to ${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}"
    ln -sf ${SOCA_PYTHON_LOCAL_INSTALL_PREFIX} "/opt/soca/soca-demoparis/python/latest"
    popd

    log_info "SOCA_PYTHON installed successfully, updating dynamic linker cache"

    # ensure 99- is there to avoid version conflict if /lib64 system python3 is already at the same version
    echo "/lib64" > /etc/ld.so.conf.d/00-system-python.conf # ensure system python is always loaded first
    echo "/opt/soca/soca-demoparis/python/latest/lib" > /etc/ld.so.conf.d/99-soca-demoparis-python.conf
    if ! ldconfig; then
      exit_fail "SOCA_PYTHON installed but unable to update ldconfig. Check bootstrap logs"
    fi

    # Install Python required libraries
    
      echo "aniso8601==10.0.0
APScheduler==3.11.0
asn1crypto==1.5.1
blinker==1.9.0
boto3==1.37.28
botocore==1.37.28
cachelib==0.13.0
cachetools==5.5.2
certifi==2025.1.31
cffi==1.17.1
cfn-flip==1.3.0
charset-normalizer==3.4.1
click==8.1.8
colorama==0.4.6
cryptography==44.0.2
docutils==0.21.2
ecdsa==0.19.1
Events==0.5
Flask==3.1.0
flask-cors==5.0.1
Flask-DebugToolbar==0.16.0
Flask-RESTful==0.3.10
flask-restful-swagger-3==0.5.1
Flask-Session==0.8.0
Flask-SQLAlchemy==3.1.1
flask-swagger==0.2.14
Flask-WTF==1.2.2
gunicorn==23.0.0
hiredis==3.1.0
idna==3.10
itsdangerous==2.2.0
Jinja2==3.1.6
jmespath==1.0.1
ldif==4.2.5
MarkupSafe==3.0.2
msgspec==0.19.0
natsort==8.4.0
opensearch-py==2.8.0
packaging==24.2
prettytable==3.16.0
pyasn1==0.6.1
pyasn1_modules==0.4.2
pycparser==2.22
pyOpenSSL==25.0.0
python-dateutil==2.9.0.post0
python-jose==3.3.0
python-ldap==3.4.4
python-pam==2.0.2
pytz==2025.2
PyYAML==6.0.2
redis==5.2.1
requests==2.32.3
requests-aws4auth==1.3.1
rsa==4.9
s3transfer==0.11.4
six==1.17.0
SQLAlchemy==2.0.40
swagger-ui-py==23.9.23
troposphere==4.9.0
typing_extensions==4.13.0
tzlocal==5.3.1
urllib3==1.26.20
uWSGI==2.0.28
uwsgitop==0.12
validators==0.34.0
wcwidth==0.2.13
Werkzeug==3.1.3
WTForms==3.2.1" > requirements.txt
    

    log_info "Creating ${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}/soca_python.env"
    echo "
export PYTHONPATH=/opt/soca/soca-demoparis/cluster_manager/
export PYTHONUSERBASE=${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}
export PYTHONEXECUTABLE=${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}/bin/python3
" > ${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}/soca_python.env

    # Source SOCA_PYTHON Environment.
    # This command is also applied to all other scripts via common.sh.j2
    source ${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}/soca_python.env

    # --user to make sure python libs are installed in the SOCA_PYTHON path only (we don't touch system python)
    if ! ${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}/bin/pip3 install --user -r requirements.txt; then
        exit_fail "Unable to install SOCA Python requirements (see templates/linux/soca_python_requirements.txt.j2)"
    fi

  fi
  popd
  log_info "Python and relevant dependency installed"
}
install_soca_python
# End: : Install Python on the Controller Host

# Install SOCA Cache
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin: Cache Client (CLI installer + Wrapper functions)




  # Install Cache CLI if needed (only on controller).
  # You can add compute_node as well, however please note CLI install will take a couple of minutes.
  # Create SOCA Optimized AMI to avoid this time penalty for ephemeral nodes  https://awslabs.github.io/scale-out-computing-on-aws-documentation/tutorials/reduce-compute-node-launch-time-with-custom-ami/
  
    function install_cache_cli() {
      log_info "Installing Cache CLI client"
      mkdir -p "${SOCA_BOOTSTRAP_ASSETS_FOLDER}/cache"
      pushd "${SOCA_BOOTSTRAP_ASSETS_FOLDER}/cache"
      
      popd
    }
    install_cache_cli

    # WRAPPER FUNCTIONS BELOW
    function get_cache_credentials() {
      local CREDENTIAL_KEY="${1}"
      local CACHE_USERNAME_PATH="${SOCA_BOOTSTRAP_ASSETS_FOLDER}/.cache_user_username_soca-demoparis.cache"
      local CACHE_PASSWORD_PATH="${SOCA_BOOTSTRAP_ASSETS_FOLDER}/.cache_user_password_soca-demoparis.cache"
      local CACHE_USER_CREDENTIALS_SECRETMANAGER_ID
      local CACHE_USERNAME
      local CACHE_PASSWORD
      if [[ ! -f ${CACHE_USERNAME_PATH} ]] || [[ ! -f ${CACHE_PASSWORD_PATH} ]]; then
        log_info "${CACHE_USERNAME_PATH} or ${CACHE_PASSWORD_PATH} does not exist, querying SecretsManager API to retrieve Cache user"

        
          # Controller Host is the only host that can query Cache Admin User
          CACHE_USER_CREDENTIALS_SECRETMANAGER_ID=$(get_secret "/soca/soca-demoparis/CacheAdminUser")
        

        CACHE_USERNAME=$(echo ${CACHE_USER_CREDENTIALS_SECRETMANAGER_ID} | jq -r ". | fromjson.username")
        CACHE_PASSWORD=$(echo ${CACHE_USER_CREDENTIALS_SECRETMANAGER_ID} | jq -r ". | fromjson.password")
        echo -n "${CACHE_USERNAME}" > "${CACHE_USERNAME_PATH}"
        echo -n "${CACHE_PASSWORD}" > "${CACHE_PASSWORD_PATH}"
        log_info "Cache user credentials temporarily cached on the system"
      else
        log_info "${CREDENTIALS_CACHE_PATH} and ${CACHE_PASSWORD_PATH} exists, retrieving cache user on filesystem"
      fi

      if [[ ${CREDENTIAL_KEY} == "username" ]]; then
        echo -n $(cat "${CACHE_USERNAME_PATH}")
      elif [[ ${CREDENTIAL_KEY} == "password" ]]; then
        echo -n $(cat "${CACHE_PASSWORD_PATH}")
      else
        exit_fail "First argument for get_cache_credentials via wrapper_cache.sh.j2 must be username or password"
      fi
    }

    function cache_get_key () {
      local CACHE_KEY="${1}"
      local CACHE_RESULT_FORMAT="${2}"
      local CACHE_VALUE
      local CACHE_GET_COMMAND
      local CACHE_CMD
      local CACHE_USERNAME
      local CACHE_PASSWORD
      local CACHE_ENDPOINT
      local CACHE_PORT
      CACHE_USERNAME=$(get_cache_credentials "username")
      CACHE_PASSWORD=$(get_cache_credentials "password")
      CACHE_ENDPOINT="${Token[TOKEN.317]}"
      CACHE_PORT="${Token[TOKEN.318]}"

      # Cache client is installed via cache_client_install.sh.h2
      

      if [[ ${CACHE_RESULT_FORMAT} == "json" ]]; then
        CACHE_GET_COMMAND="JSON.GET"
      else
        CACHE_GET_COMMAND="GET"
      fi

      # Redirect stderr to /dev/null to hide warning due to --pass (see below) otherwise CACHE_VALUE will also contains this message
      # Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.
      # Another option is to remove --pass and leverage env variable, but need to review if/when Valkey will stop relying on REDIS_PASSWORD
      CACHE_VALUE=$(${CACHE_CMD} --tls -h ${CACHE_ENDPOINT} -p ${CACHE_PORT} --user ${CACHE_USERNAME} --pass ${CACHE_PASSWORD} ${CACHE_GET_COMMAND} "${CACHE_KEY}" 2>/dev/null)
      if [[ -z ${CACHE_VALUE+x} ]] || [[ ${CACHE_VALUE} == "(nil)" ]] || [[ -z ${CACHE_VALUE} ]]; then
        echo -n "CACHE_MISS"
      else
        echo -n "${CACHE_VALUE}"
      fi
    }
  


# End: Cache Client

# Wait until all parameters have been added to CDK
while ! aws_cli ssm get-parameter --name "/soca/soca-demoparis/cdk_completed" > /dev/null 2>&1; do
    log_info "/soca/soca-demoparis/cdk_completed not found on SSM, CDK & CloudFormation are probably still in creation, waiting a little longer"
    sleep 120
done

# Mount Filesystems
/bin/bash "${SOCA_BOOTSTRAP_ASSETS_FOLDER}/filesystems_automount.sh" >> "${SOCA_BOOTSTRAP_LOGS_FOLDER}/filesystems_mount.log" 2>&1

# This shared location will be used to centralize bootstrap logs for easy troubleshooting as well as other automation tools
log_info "Creating /apps/soca/soca-demoparis/shared"
mkdir -p /apps/soca/soca-demoparis/shared/
chmod -R 600 /apps/soca/soca-demoparis/

log_info "Generating ${SOCA_BOOTSTRAP_ASSETS_FOLDER}/03_setup.sh from ${SOCA_BOOTSTRAP_ASSETS_FOLDER}/03_setup.sh.j2"
/bin/bash /opt/soca/soca-demoparis/cluster_manager/tools/j2generator/j2generator.sh --get-template "03_setup.sh.j2" \
    --output-file "${SOCA_BOOTSTRAP_ASSETS_FOLDER}/03_setup.sh" \
    --ssm-key "/" \
    --add-value "KEY=/job/NodeType VALUE=controller TYPE=str" \
    --template-dirs "/opt/soca/soca-demoparis/cluster_node_bootstrap/" \
    --template-dirs "${SOCA_BOOTSTRAP_ASSETS_FOLDER}"


log_info "Generate the final setup scripts for Login Node, this can be done during CDK deployment as not all variables are known"
/bin/bash /opt/soca/soca-demoparis/cluster_manager/tools/j2generator/j2generator.sh --get-template "compute_node/02_setup.sh.j2" \
    --output-file "s3://socamcrozes-us-west-2/soca-demoparis/config/do_not_delete/bootstrap/login_node/02_setup.sh" \
    --ssm-key "/" \
    --add-value "KEY=/job/NodeType VALUE=login_node TYPE=str" \
    --add-value "KEY=/job/BoostrapPath VALUE=/apps/soca/soca-demoparis/shared/logs/login_node TYPE=str" \
    --template-dirs "/opt/soca/soca-demoparis/cluster_node_bootstrap/"

# Continue bootstrap process
/bin/bash ${SOCA_BOOTSTRAP_ASSETS_FOLDER}/03_setup.sh >> ${SOCA_BOOTSTRAP_LOGS_FOLDER}/03_setup.sh.log 2>&1

