#!/bin/bash -xe

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

############
# setup_post_reboot.sh is generated via /apps/soca/{{ context.get("/configuration/ClusterId") }}/cluster_node_bootstrap/compute_node/setup_post_reboot.sh.j2 template
############
# Log Path: /apps/soca/{{ context.get("/configuration/ClusterId") }}/cluster_node_bootstrap/logs/compute_node/{{ context.get("/job/JobId") }}/<HOST_IP>/setup_post_reboot.log
############

# Load common functions
{% include "templates/linux/common.sh.j2" %}

# Include cache client
{% include "templates/linux/cache_client.sh.j2" %}

log_info "Starting Post Reboot bootstrap sequence"

log_info "Stopping OpenPBS services"
systemctl stop pbs

log_info "Removing previous reboot_required"
unset_reboot_required

log_info "Remove this script from the crontab table to avoid being executed twice"
crontab -l | grep -v $(readlink -f "$0") | crontab -

log_info "Starting Post-Reboot bootstrap sequence"

GPU_DETECTED=$(ec2_describe_instance_types "GpuInfo.Gpus[].Manufacturer")

log_info "GPU Detected (if any): ${GPU_DETECTED}"

if [[ -n ${GPU_DETECTED} ]]; then

  # GPU Management for both AMD and NVIDIA
  # Reboot has been initiated on setup.sh to load the new kernel after system update
  {% include "templates/linux/gpu/install_drivers.sh.j2" %}

  # Optional GPU Optimization for NVIDIA
  if [[ ${GPU_DETECTED} == "NVIDIA" ]]; then
    {% include "templates/linux/gpu/optimize_gpu.sh.j2" %}
    log_info "GPU Optimization can takes several minutes to run and is disabled by default. Uncomment the line below if you want to activate it"
    # gpu_instance_optimize_gpu_clock_speed_nvidia
  fi
else
  log_info "No GPU detected on this machine"
fi

{% if context.get("/job/Efa", False) %}
  {% include "templates/linux/efa.sh.j2" %}
{% endif %}

{% if context.get("/job/FSxLustreConfiguration", False) %}
  {% if context.get("/job/FSxLustreConfiguration").get("fsx_lustre") or context.get("/job/FSxLustreConfiguration").get("existing_fsx") %}
    {% include "templates/linux/shared_storage/mount_fsx_lustre.sh.j2" %}
    {% if context.get("/job/FSxLustreConfiguration").get("fsx_lustre") %}
      log_info "detected Ephemeral FSx for Lustre specific to this job"
      # Retrieve FSX DNS assigned to this job
      FSX_ARN=$(aws_cli resourcegroupstaggingapi get-resources \
        --tag-filters "Key=soca:FSx,Values=true" "Key=soca:JobId,Values={{ context.get("/job/JobId") }}" "Key=soca:ClusterId,Values={{ context.get("/configuration/ClusterId") }}"  \
        --query ResourceTagMappingList[].ResourceARN --output text)
      log_info "Retrieved FSx Arn: ${FSX_ARN}"
      FSX_DNS=$(aws_cli fsx describe-file-systems --file-system-ids "$(echo "${FSX_ARN}" | cut -d/ -f2)"  --query 'FileSystems[].DNSName' --output text)
      log_info "Retrieved FSx DNSName: ${FSX_DNS}"
      mount_fsx_lustre "${FSX_DNS}" "/fsx"

    {% elif context.get("/job/FSxLustreConfiguration").get("existing_fsx") %}
      log_info "detected Existing FSx for Lustre specific to this job"
      mount_fsx_lustre {{ context.get("/job/FSxLustreConfiguration").get("existing_fsx") }} "/fsx"
    {% endif %}
      {% include "templates/linux/shared_storage/fsx/lustre_client_tuning_prereboot.sh.j2" %}
  {% endif %}
{% endif %}

{% if not context.get("/job/ThreadsPerCore", False) %}
  {% include "templates/linux/disable_hyperthreading.sh.j2" %}
{% endif %}

# Check if machine is a virtual desktop, if yes install additional packages such as Gnome, DCV
{% include "compute_node/extra/virtual_desktop.sh.j2" %}

# Optional - End-User Customization
{% include "compute_node/04_setup_user_customization.sh.j2" %}

# Setup final MOTD
{% include "templates/linux/motd.sh.j2" %}

# Check if a final reboot is needed, otherwise mount all disks and start scheduler
REBOOT_REQUIRED=$(get_reboot_required)
if [[ "${REBOOT_REQUIRED}" == "no" ]]; then
   log_info "No final reboot needed, mounting all disks and starting PBS"
  # Mount all disks
  mount -a
  systemctl enable pbs
  systemctl start pbs
  log_info "Bootstrap Sequence Completed: Node Ready"
else
  log_info "Final reboot needed, preparing rc.local to be executed post final reboot"
  cat << 'EOF' >> /etc/rc.local
# Mount all disks
mount -a
{% if context.get("/job/FSxLustreConfiguration", False) %}
{% if context.get("/job/FSxLustreConfiguration").get("fsx_lustre") or context.get("/job/FSxLustreConfiguration").get("existing_fsx") %}
# Post-Mount FSxL perf tuning
{% include "templates/linux/shared_storage/fsx/lustre_client_tuning_postmount.sh.j2" %}
{% endif %}
{% endif %}
{% if not context.get("/job/ThreadsPerCore", False) %}
{% include "templates/linux/disable_hyperthreading.sh.j2" %}
{% endif %}

# Start OpenPBS
systemctl enable pbs
systemctl start pbs
source /etc/environment
echo "Node Ready - ${SOCA_NODE_TYPE}" > /etc/motd
EOF

  chmod +x /etc/rc.d/rc.local
  systemctl enable rc-local
  unset_reboot_required
  log_info "/etc/rc.d/rc.local created, final reboot triggered"
  reboot
fi


