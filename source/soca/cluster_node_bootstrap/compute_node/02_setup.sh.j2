#!/bin/bash -xe

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Log Path: {{ context.get("/job/BoostrapPath") }}
############
{% include "templates/linux/common.sh.j2" %}

log_info "Setup Start Date: $(date)"

# Install Required System library/packages
{% include "templates/linux/system_packages/install_required_packages.sh.j2" %}

# Create /opt/soca/{{ context.get('/configuration/ClusterId') }}/ if needed
mkdir -p /opt/soca/{{ context.get('/configuration/ClusterId') }}/

{% if context.get("/configuration/BaseOS") in ("ubuntu2204", "ubuntu2404") %}
  log_info "Disabling auto-update on Ubuntu"
  sed -ie 's/"1"/"0"/g' /etc/apt/apt.conf.d/20auto-upgrades
{% endif %}

# Add cache client functions (Cache CLI is automatically installed if needed)
{% include "templates/linux/cache_client.sh.j2" %}

# Adding additional SOCA Environment Variables
set_environment_variable "AWS_DEFAULT_REGION" "{{ context.get("/configuration/Region") }}"
set_environment_variable "SOCA_BOOTSTRAP_ASSETS_FOLDER" "/root/soca_bootstrap_$(instance_id)"
set_environment_variable "SOCA_BOOTSTRAP_LOGS_FOLDER" "{{ context.get("/job/BootstrapPath") }}/$(hostname -s)"
set_environment_variable "SOCA_NODE_TYPE" "{{ context.get("/job/NodeType") }}"
set_environment_variable "SOCA_VERSION" "{{ context.get("/configuration/Version") }}"
set_environment_variable "SOCA_INSTALL_BUCKET" "{{ context.get("/configuration/S3Bucket") }}"
set_environment_variable "SOCA_CONTROLLER_IP" "{{ context.get("/configuration/ControllerPrivateIP") }}"
set_environment_variable "SOCA_HOME" "/opt/soca/{{ context.get("/configuration/ClusterId") }}"
set_environment_variable "SOCA_BOOTSTRAP_LOGS" "/apps/soca/{{ context.get("/configuration/ClusterId") }}/shared/logs/bootstrap/"

{% if context.get("/job/NodeType") == "compute_node" %}
  # Added via cluster_manager/orchestrator/cloudformation_builder.py
  set_environment_variable "SOCA_JOB_QUEUE" "{{ context.get("/job/JobQueue") }}"
  set_environment_variable "SOCA_JOB_OWNER" "{{ context.get("/job/JobOwner") }}"
  set_environment_variable "SOCA_JOB_NAME" "{{ context.get("/job/JobName") }}"
  set_environment_variable "SOCA_JOB_PROJECT" "{{ context.get("/job/JobProject") }}"
  set_environment_variable "SOCA_JOB_ID" "{{ context.get("/job/JobId") }}"
{% elif context.get("/job/NodeType") == "dcv_node" %}
  # Added via cluster_manager/web_interface/api/v1/dcv/create_linux_desktop.py
  set_environment_variable "SOCA_DCV_SESSION_OWNER" "{{ context.get("/dcv/SessionOwner") }}"
  # Set the SOCA_DCV_SESSION_ID (same name on Windows). This is used by the scheduled task to retrieve the DCV Session ID
  set_environment_variable "SOCA_DCV_SESSION_ID" "{{ context.get("/dcv/SessionId") }}"
  set_environment_variable "SOCA_DCV_SESSION_NAME" "{{ context.get("/dcv/SessionName") }}"
{% elif context.get("/job/NodeType") == "login_node" %}
  # Add any additional variable for login nodes if needed
{% endif %}

log_info "Stopping OpenPBS services if already there"
systemctl stop pbs || echo "PBS service not found yet, ignoring"

# Install jq
{% include "templates/linux/jq.sh.j2" %}

{% set PATH = '/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/pbs/bin:/opt/pbs/sbin:/opt/pbs/bin:/opt/soca/' ~ context.get("/configuration/ClusterId") %}

if [[ $(rpm -qa kernel | wc -l) -gt 1 ]]; then
    set_reboot_required "Kernel was updated during package install"
fi

# Check if machine is a login node, if yes perform additional setup actions
{% include "compute_node/extra/login_node.sh.j2" %}

# Configure Scratch Partition is scratch_size is specified or instance has local disks
{% include "templates/linux/configure_scratch_partition.sh.j2" %}

# Install CloudWatch Log Agent
{% include "templates/linux/aws_cloudwatch_agent.sh.j2" %}

# Configure /etc/hosts
{% include "templates/linux/configure_hosts.sh.j2" %}

# Install/Load SOCA Python
{% include "templates/linux/soca_python.sh.j2" %}

# Install OpenPBS if needed
{% include "templates/linux/scheduler/openpbs/install.sh.j2" %}

# Configure OpenPBS client
{% include "templates/linux/scheduler/openpbs/configure_client.sh.j2" %}

# Disable SELINUX
{% include "templates/linux/disable_selinux.sh.j2" %}

# Disable FirewallD
{% include "templates/linux/disable_firewalld.sh.j2" %}

# Configure OpenLDAP or Microsoft AD
{% if context.get("/configuration/UserDirectory/provider") in ["existing_openldap", "openldap"] %}
  # OpenLDAP configuration
  {% include "templates/linux/openldap_client.sh.j2" %}
{% elif context.get("/configuration/UserDirectory/provider") in ["existing_active_directory","aws_ds_managed_activedirectory", "aws_ds_simple_activedirectory"] %}
  # Active Directory configuration
  {% include "templates/linux/join_activedirectory.sh.j2" %}
{% else %}
  exit_fail "UserDirectory/provider must be existing_active_directory, existing_openldap, openldap, aws_ds_simple_activedirectory, aws_ds_managed_activedirectory, detected {{ context.get("/configuration/UserDirectory/provider") }}"
{% endif %}

# Disable StrictHostKeyChecking
{% include "templates/linux/disable_ssh_strict_host_key_check.sh.j2" %}

# Configure Chrony
{% include "templates/linux/chronyd.sh.j2" %}

# Disable ulimits
{% include "templates/linux/disable_ulimits.sh.j2" %}

# Tag EBS disks manually as CFN ASG does not support it
{% include "templates/linux/tags/ebs.sh.j2" %}

# Tag Network Interface for the Compute Node
{% include "templates/linux/tags/eni.sh.j2" %}

log_info "Setup End Date: $(date)"

# Prepare crontab for post-reboot or execute the post-reboot script automatically
REBOOT_REQUIRED=$(get_reboot_required)
{% if context.get("/job/NodeType") in ("dcv_node", "compute_node") %}
if [[ "${REBOOT_REQUIRED}" == "yes" ]]; then
  echo "@reboot /bin/bash ${SOCA_BOOTSTRAP_ASSETS_FOLDER}/03_setup_post_reboot.sh >> ${SOCA_BOOTSTRAP_LOGS_FOLDER}/03_setup_post_reboot.log 2>&1" | crontab -
  log_info "Final bootstrap sequence will be executed post reboot, verifying crontab"
  crontab -l
  log_info "Rebooting the machine"
  reboot
else
  log_info "No reboot needed, continuing bootstrap sequence"
  /bin/bash "${SOCA_BOOTSTRAP_ASSETS_FOLDER}/03_setup_post_reboot.sh" >> ${SOCA_BOOTSTRAP_LOGS_FOLDER}/03_setup_post_reboot.log 2>&1
fi

{% else %}
 log_info "No post_reboot customizations for login_nodes or controller host"
 {% include "templates/linux/motd.sh.j2" %}
 if [[ "${REBOOT_REQUIRED}" == "yes" ]]; then
   log_info "Rebooting the machine"
   reboot
 fi
{% endif %}
