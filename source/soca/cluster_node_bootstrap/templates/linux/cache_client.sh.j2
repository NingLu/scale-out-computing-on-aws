# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin: Cache Client
{% if context.get("/job/NodeType") in ("controller", "dcv_node", "login_node") %}
  # Cache is not installed on Simulation nodes. Add it if needed
  {% if context.get("/configuration/Cache/enabled") %}
    # Only Controller nodes have the permission to get_secret for CacheAdminUser
    CACHE_READONLY_USER_SECRETMANAGER_ID=$(get_secret "/soca/{{ context.get("/configuration/ClusterId") }}/CacheReadOnlyUser")
    CACHE_READONLY_USER=$(echo ${CACHE_READONLY_USER_SECRETMANAGER_ID} | jq -r ". | fromjson.username")
    CACHE_READONLY_PASSWORD=$(echo ${CACHE_READONLY_USER_SECRETMANAGER_ID} | jq -r ". | fromjson.password")
    CACHE_ENDPOINT="{{ context.get("/configuration/Cache/endpoint") }}"
    CACHE_PORT="{{ context.get("/configuration/Cache/port") }}"

    {% if context.get("/configuration/Cache/engine") == "redis" %}
      # Note: do not yum install redis as the default package won't include TLS support (required for ElastiCache)
      if [[ ! -f "/usr/local/bin/redis-cli" ]]; then
        log_info "Building redis-cli client with --tls support"
        cd /root/soca_bootstrap
        wget http://download.redis.io/redis-stable.tar.gz
        tar xvzf redis-stable.tar.gz
        cd redis-stable
        make distclean
        make redis-cli BUILD_TLS=yes
        sudo install -m 755 src/redis-cli /usr/local/bin/
      else
        echo "/usr/local/bin/redis-cli already exist, skipping REDIS install"
      fi
      CACHE_CMD="/usr/local/bin/redis-cli"
    {% elif context.get("/configuration/Cache/engine") == "valkey" %}
      if [[ ! -f "/usr/local/bin/valkey-cli" ]]; then
        log_info "Building valkey client"
        cd /root/soca_bootstrap
        wget https://github.com/valkey-io/valkey/archive/refs/tags/8.0.1.tar.gz
        tar xvzf 8.0.1.tar.gz
        cd valkey-8.0.1
        make distclean
        make valkey-cli BUILD_TLS=yes
        sudo install -m 755 src/valkey-cli /usr/local/bin/
      else
        echo "/usr/local/bin/valkey-cli already exist, skipping VALKEY install"
      fi
      CACHE_CMD="/usr/local/bin/valkey-cli"
    {% endif %}

    cache_get_key () {
      local CACHE_KEY="${1}"
      local CACHE_RESULT_FORMAT="${2}"
      local CACHE_VALUE
      local CACHE_GET_COMMAND

      if [[ ${CACHE_RESULT_FORMAT} == "json" ]]; then
        CACHE_GET_COMMAND="JSON.GET"
      else
        CACHE_GET_COMMAND="GET"
      fi
      # Redirect sterr to /dev/null to hide warning due to --pass (see below) otherwise CACHE_VALUE will also contains this message
      # Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.
      # Another option is to remove --pass and leverage env variable, but need to review if/when Valkey will stop relying on REDIS_PASSWORD
      CACHE_VALUE=$(${CACHE_CMD} --tls -h ${CACHE_ENDPOINT} -p ${CACHE_PORT} --user ${CACHE_READONLY_USER} --pass ${CACHE_READONLY_PASSWORD} ${CACHE_GET_COMMAND} "${CACHE_KEY}" 2>/dev/null)
      if [[ -z ${CACHE_VALUE+x} || ${CACHE_VALUE} == "(nil)" || -z ${CACHE_VALUE} ]] ; then
          echo -n "CACHE_MISS"
      else
          echo -n "${CACHE_VALUE}"
      fi
    }

  {% else %}
    cache_get_key () {
      # Cache not enabled, always return CACHE_MISS
      echo -n "CACHE_MISS"
    }
  {% endif %}

{% else %}
  cache_get_key () {
    # Cache not deployed on this given machine.
    # By default cache is deployed only on persistent nodes such as controller/login node or dcv node and not on compute (simulation) nodes
    echo -n "CACHE_MISS"
  }

{% endif %}