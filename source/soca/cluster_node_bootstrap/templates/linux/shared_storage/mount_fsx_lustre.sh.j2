# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin: Mount FSx Lustre
{% if "templates/linux/shared_storage/mount_fsx_lustre.sh.j2" not in ns.template_already_included %}
  {% set _ = ns.template_already_included.append("templates/linux/shared_storage/mount_fsx_lustre.sh.j2") %}

  {% include "templates/linux/shared_storage/fstab_wrapper.sh.j2" %}

  {% if context.get("/configuration/BaseOS") in ("rhel7", "rhel8", "rhel9", "rocky8", "rocky9") %}
    function rhel_driver_install {
      log_info "Installing FSx Lustre Driver for RHEL based distro"
      local EL_VERSION=${1}
      local REPO_VERSION_REWRITE=${2}

      if [[ ! ${EL_VERSION} =~ ^(7|8|9)$ ]]; then
        log_error "EL Version must be either 7, 8 or 9"
      else
        log_info "Getting FSx Lustre repo for RHEL distros version ${EL_VERSION}"

        file_download --download-url="https://fsx-lustre-client-repo-public-keys.s3.amazonaws.com/fsx-rpm-public-key.asc" --save-as="${SOCA_BOOTSTRAP_ASSETS_FOLDER}/fsx-rpm-public-key.asc"

        if [[ ! -f "/etc/yum.repos.d/aws-fsx.repo" ]]; then
          log_info "Downloading https://fsx-lustre-client-repo.s3.amazonaws.com/el/${EL_VERSION}/fsx-lustre-client.repo and saving it to /etc/yum.repos.d/aws-fsx.repo"
          file_download --download-url="https://fsx-lustre-client-repo.s3.amazonaws.com/el/"${EL_VERSION}"/fsx-lustre-client.repo" --save-as="/etc/yum.repos.d/aws-fsx.repo"
        fi

        if [[ -n "${REPO_VERSION_REWRITE}" ]]; then
          echo "SED Rewrite enabled ${REPO_VERSION_REWRITE}"
          sed -i "${REPO_VERSION_REWRITE}" /etc/yum.repos.d/aws-fsx.repo
        fi

        packages_clean
        if [[ ! -f "${SOCA_BOOTSTRAP_ASSETS_FOLDER}/fsx-rpm-public-key.asc" ]]; then
          log_warning "Unable to locate ${SOCA_BOOTSTRAP_ASSETS_FOLDER}/fsx-rpm-public-key.asc, installing without gpgcheck"
          packages_install kmod-lustre-client lustre-client --nogpgcheck
        else
          {% if context.get("/configuration/BaseOS") in ("centos7", "rhel7", "rhel8", "rhel9", "rocky8", "rocky9") %}
            rpm --import "${SOCA_BOOTSTRAP_ASSETS_FOLDER}/fsx-rpm-public-key.asc"
          {% endif %}
          packages_install kmod-lustre-client lustre-client
        fi

      fi
      log_info "FSx Driver installed"
    }

  {% endif %}

  function mount_fsx_lustre {
    log_info "Preparing FSx Lustre mount"
    # MOUNT_TARGET (required): FSx for Lustre Filesystem ID. Used to determine actual mount endpoint if ENDPOINT is not set
    # MOUNT_PATH (required): Unix path to mount the EFS on
    # ON_MOUNT_FAILURE (required): What to do if the mount is not successful (exit or ignore)
    # MOUNT_OPTIONS (optional): NFS options to use
    # ENABLED (optional): Whether the automount is enabled

    for arg in "$@"; do
        case $arg in
            --mount-target=*) MOUNT_TARGET="${arg#*=}" ;;
            --mount-path=*) MOUNT_PATH="${arg#*=}" ;;
            --mount-options=*) MOUNT_OPTIONS="${arg#*=}" ;;
            --on-mount-failure=*) ON_MOUNT_FAILURE="${arg#*=}" ;;
            --enabled=*) ENABLED="${arg#*=}" ;;
            *) exit_fail "Unknown arg ${arg} for mount_efs";;
        esac
    done

    if [[ -z "${ENABLED}" ]]; then
      ENABLED="true"
      log_warning "--enabled not set, default to ${ENABLED}"
    fi

    if [[ -z "${MOUNT_PATH}" ]]; then
      exit_fail "--mount-path not set for mount_fsx_lustre"
    fi

    if [[ -z "${ON_MOUNT_FAILURE}" ]]; then
      ON_MOUNT_FAILURE="ignore"
      log_warning "--on-mount-failure not specified, default to ${ON_MOUNT_FAILURE}"
    fi

    if [[ -z "${MOUNT_OPTIONS}" ]]; then
      MOUNT_OPTIONS="defaults,noatime,flock,_netdev"
      log_warning "--mount-options not specified, default to ${ON_MOUNT_FAILURE}"
    fi

    if ! verify_package_installed jq; then
      log_info "jq not found, installing it ..."
      packages_install jq
    fi

    if [[ -z "${MOUNT_TARGET}" ]]; then
      exit_fail "--mount-target not set for mount_fsx_lustre"
    fi

    if [[ "${ENABLED}" == "true" ]]; then

      local FSX_LUSTRE_INFO=$(aws_cli fsx describe-file-systems --file-system-ids "${MOUNT_TARGET}")
      local FSX_LUSTRE_DNS=$(echo ${FSX_LUSTRE_INFO} | jq -r '.FileSystems[].DNSName // "NO_VALUE"')
      local FSX_LUSTRE_MOUNT_NAME=$(echo ${FSX_LUSTRE_INFO} | jq -r '.FileSystems[].LustreConfiguration.MountName // "NO_VALUE"')

      if [[ -z ${FSX_LUSTRE_DNS} ]]; then
        exit_fail "Unable to determine DNSName for ${MOUNT_TARGET}"
      fi

      if [[ -z ${FSX_LUSTRE_MOUNT_NAME} ]]; then
        exit_fail "Unable to determine MountName for ${MOUNT_TARGET}"
      fi

      local ENDPOINT="${FSX_LUSTRE_DNS}@tcp:/${FSX_LUSTRE_MOUNT_NAME}"
      local KERNEL=$(uname -r)
      local MACHINE=$(uname -m)

      for ((LIFECYCLE_VERIFICATION=1; LIFECYCLE_VERIFICATION<=30; LIFECYCLE_VERIFICATION++)); do
          log_info "Verifying if ${MOUNT_TARGET} is in AVAILABLE state ..."
          if [[ $(aws_cli fsx describe-file-systems --file-system-ids "${MOUNT_TARGET}" --query FileSystems[].Lifecycle --output text) == "AVAILABLE" ]]; then
            break
          else
            log_warning "FSx Lustre Not available yet .. trying again in 60 seconds, attempt ${LIFECYCLE_VERIFICATION}"
          fi
          if [[ ${LIFECYCLE_VERIFICATION} -eq 30 ]]; then
              exit_fail "Unable to determine if the filesystem is in AVAILABLE state after 30 attempts. Exiting."
          fi
          sleep 60
        done

      log_info "Preparing to install Lustre driver on kernel version: ${KERNEL} running on: ${MACHINE}"
      if ! verify_package_installed lustre-client; then
        # Install FSx for Lustre Client
        # https://docs.aws.amazon.com/fsx/latest/LustreGuide/install-lustre-client.html
        log_info "FSx Lustre Client not installed, installing it .. "
        {% if context.get("/configuration/BaseOS") == "amazonlinux2" %}
          amazon-linux-extras install -y lustre
        {% elif context.get("/configuration/BaseOS") == "amazonlinux2023" %}
          packages_install lustre-client
        {% elif context.get("/configuration/BaseOS") in ("rhel7", "centos7") %}
          case "$KERNEL$MACHINE" in
            *"3.10.0-957"*)
              packages_install https://downloads.whamcloud.com/public/lustre/lustre-2.10.8/el7/client/RPMS/x86_64/kmod-lustre-client-2.10.8-1.el7.x86_64.rpm
              packages_install https://downloads.whamcloud.com/public/lustre/lustre-2.10.8/el7/client/RPMS/x86_64/lustre-client-2.10.8-1.el7.x86_64.rpm;;
            *"3.10.0-1062"*) rhel_driver_install 7 "s#7#7.7#" ;;
            *"3.10.0-1127"*) rhel_driver_install 7 "s#7#7.8#" ;;
            *"3.10.0-1160"*) rhel_driver_install 7 ;;
            *"4.18.0-193"*)  rhel_driver_install 7 ;;
            *) log_error "ERROR: Can't install FSx for Lustre client as kernel version: ${KERNEL} isn't matching expected versions for EL7" ;;
          esac

        {% elif context.get("/configuration/BaseOS") in ("rhel8", "rocky8") %}
            case "$KERNEL$MACHINE" in
              *"4.18.0-553"*) rhel_driver_install 8 ;;
              *"4.18.0-513"*) rhel_driver_install 8 's#8#8.9#' ;;
              *"4.18.0-477"*) rhel_driver_install 8 's#8#8.8#' ;;
              *"4.18.0-425"*) rhel_driver_install 8 's#8#8.7#' ;;
              *"4.18.0-372"*) rhel_driver_install 8 's#8#8.6#' ;;
              *"4.18.0-348"*) rhel_driver_install 8 's#8#8.5#' ;;
              *"4.18.0-305"*) rhel_driver_install 8 's#8#8.4#' ;;
              *"4.18.0-240"*) rhel_driver_install 8 's#8#8.3#' ;;
              *"4.18.0-193"*) rhel_driver_install 8 's#8#8.2#' ;;
              *) log_error "Can't install FSx for Lustre client as kernel version $KERNEL isn't matching expected versions for EL8"
                ;;
            esac

        {% elif context.get("/configuration/BaseOS") in ("rhel9", "rocky9") %}
            case "$KERNEL$MACHINE" in
              *"5.14.0-503"*) rhel_driver_install 9 ;;
              *"5.14.0-427"*) rhel_driver_install 9 's#9#9.4#' ;;
              *"5.14.0-362"*) rhel_driver_install 9 's#9#9.3#' ;;
              *"5.14.0-70"*) rhel_driver_install 9 's#9#9.0#' ;;
              *) log_error "Can't install FSx for Lustre client as kernel version $KERNEL isn't matching expected versions for EL9";;
            esac
        {% elif context.get("/configuration/BaseOS") == "ubuntu2204" %}
            file_download --download-url="https://fsx-lustre-client-repo-public-keys.s3.amazonaws.com/fsx-ubuntu-public-key.asc" --save-as="${SOCA_BOOTSTRAP_ASSETS_FOLDER}/fsx-ubuntu-public-key.asc"
            gpg --dearmor < ${SOCA_BOOTSTRAP_ASSETS_FOLDER}/fsx-ubuntu-public-key.asc | sudo tee /usr/share/keyrings/fsx-ubuntu-public-key.gpg >/dev/null
            echo "deb [signed-by=/usr/share/keyrings/fsx-ubuntu-public-key.gpg] https://fsx-lustre-client-repo.s3.amazonaws.com/ubuntu jammy main" > /etc/apt/sources.list.d/fsxlustreclientrepo.list
            packages_generic_command update
            packages_install linux-aws lustre-client-modules-aws
        {% endif %}
      else
        log_info "FSx Lustre Driver already installed ..."
      fi

      if fstab_wrapper "${ENDPOINT} ${MOUNT_PATH} lustre ${MOUNT_OPTIONS} 0 0"; then
        log_info "Successfully mounted ${ENDPOINT} as ${MOUNT_PATH}"
      else
        if [[ ${ON_MOUNT_FAILURE} == "exit" ]]; then
          exit_fail "Unable to mount ${ENDPOINT} as ${MOUNT_PATH}"
        else
          log_warning "Unable to mount ${ENDPOINT} as ${MOUNT_PATH}, ignoring"
        fi
      fi
    else
      log_warning "FSx Lustre Filesystem ${MOUNT_TARGET}, mount path ${MOUNT_PATH} is not enabled. Skipping ... Detected enabled flag ${ENABLED}"
    fi
    }
{% endif %}
# End: Mount FSx Lustre
