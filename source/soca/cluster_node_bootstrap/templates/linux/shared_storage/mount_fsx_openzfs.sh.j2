# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin: FSx OpenZFS mount
{% if "templates/linux/shared_storage/mount_fsx_openzfs.sh.j2" not in ns.template_already_included %}
  {% set _ = ns.template_already_included.append("templates/linux/shared_storage/mount_fsx_openzfs.sh.j2") %}

  {% include "templates/linux/shared_storage/fstab_wrapper.sh.j2" %}

  function mount_fsx_openzfs () {
    # MOUNT_TARGET (required): FSx OpenZFS Filesytem ID. Used to determine actual mount endpoint if ENDPOINT is not set
    # MOUNT_PATH (required): Unix path to mount the EFS on
    # ON_MOUNT_FAILURE (required): What to do if the mount is not successful (exit or ignore)
    # MOUNT_OPTIONS (optional): NFS options to use
    # ENABLED (optional): Whether the automount is enabled

    local MOUNT_TARGET
    local MOUNT_PATH
    local MOUNT_OPTIONS
    local ON_MOUNT_FAILURE
    for arg in "$@"; do
        case $arg in
            --mount-target=*) MOUNT_TARGET="${arg#*=}" ;;
            --mount-path=*) MOUNT_PATH="${arg#*=}" ;;
            --mount-options=*) MOUNT_OPTIONS="${arg#*=}" ;;
            --on-mount-failure=*) ON_MOUNT_FAILURE="${arg#*=}" ;;
            --enabled=*) ENABLED="${arg#*=}" ;;
            *) exit_fail "Unknown arg ${arg} for mount_fsx_openzfs";;
        esac
    done

    if [[ -z "${ENABLED}" ]]; then
      ENABLED="true"
      log_warning "--enabled not set, default to ${ENABLED}"
    fi

    if [[ -z "${MOUNT_PATH}" ]]; then
      exit_fail "--mount-path not set for mount_fsx_openzfs"
    fi

    if [[ -z "${ON_MOUNT_FAILURE}" ]]; then
      ON_MOUNT_FAILURE="ignore"
      log_warning "--on-mount-failure not specified, default to ${ON_MOUNT_FAILURE}"
    fi

    if [[ -z ${MOUNT_OPTIONS} ]]; then
      MOUNT_OPTIONS="nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport"
      log_warning "--mount-options not specified, default to ${MOUNT_OPTIONS}"
    fi

    if [[ "${ENABLED}" == "true" ]]; then
      if [[ -z "${MOUNT_TARGET}" ]]; then
        exit_fail "--mount-target not set for mount_fsx_openzfs"
      else
        local DNS_NAME=$(aws_cli fsx describe-file-systems --file-system-id ${MOUNT_TARGET} --query 'FileSystems[0].DNSName')
        if [[ -z ${DNS_NAME} ]]; then
          exit_fail "Unable to find FileSystems[0].DNSName of ${MOUNT_TARGET}. API Result: ${DNS_NAME}"
        fi
          ENDPOINT="${DNS_NAME}:/fsx"
      fi

      if fstab_wrapper "${ENDPOINT} ${MOUNT_PATH} nfs4 ${MOUNT_OPTIONS} 0 0"; then
        log_info "Successfully mounted ${ENDPOINT} as ${MOUNT_PATH}"
      else
        if [[ ${ON_MOUNT_FAILURE} == "exit" ]]; then
          exit_fail "Unable to mount ${ENDPOINT} as ${MOUNT_PATH}"
        else
          log_warning "Unable to mount ${ENDPOINT} as ${MOUNT_PATH}, ignoring"
        fi
      fi
    else
      log_warning "FSx OpenZFS Filesystem ${MOUNT_TARGET}, mount path ${MOUNT_PATH} is not enabled. Skipping ... Detected enabled flag ${ENABLED}"
    fi
  }
{% endif %}

# End: EFS mount
