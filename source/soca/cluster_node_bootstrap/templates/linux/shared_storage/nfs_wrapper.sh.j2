# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

{% if context.get("/configuration/BaseOS") in ("amazonlinux2", "amazonlinux2023", "centos7", "rhel7", "rhel8", "rhel9", "rocky8", "rocky9") %}

{% if "templates/linux/shared_storage/nfs_wrapper.sh.j2" not in included_templates %}
   {% if included_templates is not defined %}
     # Ensure function is only included once
      {% set included_templates = ["templates/linux/shared_storage/nfs_wrapper.sh.j2"] %}
   {% else %}
      {% set included_templates = included_templates + ["templates/linux/shared_storage/nfs_wrapper.sh.j2"] %}
   {% endif %}

  function wrapper_mount_nfs () {
    # Don't forget to call this function on your template file
    # mount_efs <mount_point> <efs_endpoint>
    #ex: mount_efs "/data" "fs-abcd1234.efs.us-west-2.amazonaws.com:/"
    local NFS_ENDPOINT="${1}" # Make sure the EFS Endpoint include the SOURCE MOUNT! eg: efs_endpoint:/ and not just efs_endpoint
    local MOUNT_POINT="${2}" # Local linux folder to use as mountpoint
    local NFS_OPS_DATA="${3}" # Optional

    if [[ -z "${NFS_OPS_DATA}" ]]; then
      local NFS_OPTS_DATA="nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport"
    fi

    local MOUNT_VERIFICATION
    local MOUNT_ATTEMPT
    local ENDPOINT_VERIFICATION=$(echo ${NFS_ENDPOINT} | cut -d ':' -f1)

    if [[ -z "${MOUNT_POINT}" ]] || [[ -z "${NFS_ENDPOINT}" ]]; then
      exit_fail "To mount this endpoint, you must specify the mount point as first argument and NFS endpoint as second argument"
    fi

    if grep -qF "${NFS_ENDPOINT} ${MOUNT_POINT}" /etc/fstab; then
      log_info "This entry seems to already exist on /etc/fstab, skipping it"
      echo -n "success"
      return
    fi

    if mount | grep -q "${MOUNT_POINT}"; then
      if mount | grep "${MOUNT_POINT}" | grep -q ${NFS_ENDPOINT} ; then
        log_info "${MOUNT_POINT} is already mounted to the right disk"
        echo -n "success"
        return
      else
        exit_fail "${MOUNT_POINT} is already mounted to a different disk"
      fi
    fi

    # Case where nslookup is not bundle with the AMI, filesystem mount happens at the user-data level (before we proceed to full package install)
    if ! verify_package_installed bind-utils; then
      packages_install bind-utils
    fi

    # Verify if the filesystem resolve
    for ((MOUNT_VERIFICATION=1; MOUNT_VERIFICATION<=30; MOUNT_VERIFICATION++)); do
      log_info "Checking if ${ENDPOINT_VERIFICATION} exist and is reachable ..."
      if nslookup "${ENDPOINT_VERIFICATION}" >/dev/null 2>&1; then
        break
      else
        log_error "Endpoint not reachable .. trying again in 60 seconds, attempt ${MOUNT_VERIFICATION}"
      fi
      if [[ ${MOUNT_VERIFICATION} -eq 30 ]]; then
          exit_fail "Unable to determine if the filesystem exist after 30 attempts. Exiting."

      fi
      sleep 60
    done

    log_info "Creating ${MOUNT_POINT} if it does not exist"
    mkdir -p ${MOUNT_POINT}

    if ! verify_package_installed nfs-utils; then
      log_info "Installing nfs-utils"
      packages_install nfs-utils
    fi

    # Adding to /etc/fstab
    echo "${NFS_ENDPOINT} ${MOUNT_POINT} nfs4 ${NFS_OPTS_DATA} 0 0" >> /etc/fstab

    # Trying to mount
    for ((MOUNT_ATTEMPT=1; MOUNT_ATTEMPT<=30; MOUNT_ATTEMPT++)); do
      if mount -a; then
          break
      fi
      local SLEEP_TIME=$(( RANDOM % 60 ))
      log_info "Mounting attempt ${MOUNT_ATTEMPT}/30 ..."
      sleep ${SLEEP_TIME}
      if [[ ${MOUNT_ATTEMPT} -eq 30 ]]; then
          log_error "Failed to mount file system after 30 attempts. Exiting."
          exit_fail
      fi
    done
    echo -n "success"
  }
{% endif %}
{% endif %}