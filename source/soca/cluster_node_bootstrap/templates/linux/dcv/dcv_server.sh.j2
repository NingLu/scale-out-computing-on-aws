# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin: Install & Configure DCV Server

function install_dcv_server () {

  local DCV_SESSION_NAME="{{ context.get("/dcv/SessionName") }}"
  local DCV_SESSION_OWNER="{{ context.get("/dcv/SessionOwner") }}"
  local DCV_SESSION_ID="{{ context.get("/dcv/SessionId") }}"
  local DCV_AUTH_TOKEN_VERIFIER="{{ context.get("/dcv/AuthTokenVerifier") }}"
  local MACHINE=$(uname -m)
  local SERVER_HOSTNAME=$(hostname)
  local SERVER_HOSTNAME_ALT=$(echo $SERVER_HOSTNAME | cut -d. -f1)


  {% if context.get("/configuration/BaseOS") in ("amazonlinux2") %}
    {% set DCV_VERSION_FAMILY = "al2" %}
  {% elif context.get("/configuration/BaseOS") in ("rhel7", "centos7") %}
    {% set DCV_VERSION_FAMILY = "el7" %}
  {% elif context.get("/configuration/BaseOS") in ("rhel8", "rocky8") %}
    {% set DCV_VERSION_FAMILY = "el8" %}
  {% elif context.get("/configuration/BaseOS") in ("rhel9", "rocky9") %}
    {% set DCV_VERSION_FAMILY = "el9" %}
  {% else %}
    exit_fail "Unrecognized Base OS for DCV Server"
  {% endif %}

  if [[ ${MACHINE} == "x86_64" ]]; then
    local DCV_URL="{{ context.get("/system/dcv/" ~ DCV_VERSION_FAMILY ~ "/x86_64/url") }}"
    local DCV_HASH="{{ context.get("/system/dcv/" ~ DCV_VERSION_FAMILY ~ "/x86_64/sha256") }}"
    local DCV_VERSION="{{ context.get("/system/dcv/" ~ DCV_VERSION_FAMILY ~ "/x86_64/version") }}"
  elif [[ ${MACHINE} == "aarch64" ]]; then
    local DCV_URL="{{ context.get("/system/dcv/" ~ DCV_VERSION_FAMILY ~ "/aarch64/url") }}"
    local DCV_HASH="{{ context.get("/system/dcv/" ~ DCV_VERSION_FAMILY ~ "/aarch64/sha256") }}"
    local DCV_VERSION="{{ context.get("/system/dcv/" ~ DCV_VERSION_FAMILY ~ "/aarch64/version") }}"
  else
    exit_fail "Unrecognized machine type. Virtual Machine must be either x86_64 or aarch64, detected ${MACHINE}"
  fi

  log_info "Detected following DCV download information:"
  log_info "DCV_URL ${DCV_URL}"
  log_info "DCV_HASH ${DCV_HASH}"
  log_info "DCV_VERSION ${DCV_VERSION}"

  mkdir -p "${SOCA_BOOTSTRAP_ASSETS_FOLDER}/dcvserver"
  pushd "${SOCA_BOOTSTRAP_ASSETS_FOLDER}/dcvserver"

  # Download and Install DCV (if not already there)
  if ! verify_package_installed "nice-dcv-server" && ! verify_package_installed "amazon-dcv-server"; then
    log_info "DCV Not found, Downloading + Installing DCV ..."
    file_download --download-url="${DCV_URL}" --save-as="dcv_installer_${DCV_VERSION}.tgz" --sha256-checksum="${DCV_HASH}"

    log_info "Extracting DCV archive ..."
    tar zxvf "dcv_installer_${DCV_VERSION}.tgz" --strip-components=1 -C .

    log_info "Installing DCV ..."

    rpm -ivh nice-xdcv-*.${MACHINE}.rpm --nodeps
    rpm -ivh nice-dcv-server-*.${MACHINE}.rpm --nodeps
    rpm -ivh nice-dcv-web-viewer-*.${MACHINE}.rpm --nodeps

    log_info "Enable DCV support for USB remotization .. "
    packages_install dkms
    DCVUSBDRIVERINSTALLER=$(which dcvusbdriverinstaller)
    $DCVUSBDRIVERINSTALLER --quiet

    # Enable GPU support
    if [[ -n ${GPU_DETECTED} ]]; then
      log_info "Detected GPU instance, adding support for nice-dcv-gl"
      rpm -ivh nice-dcv-gl*.rpm --nodeps
    fi
  else
    log_info "DCV already up and running on this machine, skipping DCV install"
  fi

  # Configure DCV
  local IDLE_TIMEOUT={{ context.get("/system/dcv/idle_timeout") }}
  local USER_HOME=$(eval echo ~${DCV_SESSION_OWNER})
  local DCV_STORAGE_ROOT="$USER_HOME/{{ context.get("/system/dcv/session_storage") }}" # Create the storage root location if needed

  log_info "Creating DCV Session Storage if needed ${DCV_STORAGE_ROOT} and applying permissions"
  mkdir -p ${DCV_STORAGE_ROOT}
  chown ${DCV_SESSION_OWNER} ${DCV_STORAGE_ROOT}

  mv /etc/dcv/dcv.conf /etc/dcv/dcv.conf.original.$(date +%s)
  echo -e """
[license]
[log]
[session-management]
virtual-session-xdcv-args=\"-listen tcp\"
[session-management/defaults]
[session-management/automatic-console-session]
storage-root=\"${DCV_STORAGE_ROOT}\"
[display]
# add more if using an instance with more GPU
cuda-devices=[\"0\"]
[connectivity]
web-url-path=\"/${SERVER_HOSTNAME_ALT}\"
idle-timeout=${IDLE_TIMEOUT}
[security]
auth-token-verifier=\"${DCV_AUTH_TOKEN_VERIFIER}\"
no-tls-strict=true
os-auto-lock=false
""" > /etc/dcv/dcv.conf

  log_info "Disabling X11 DPMS"
  cp /etc/X11/xorg.conf.d/99-disable-dpms.conf /etc/X11/xorg.conf.d/99-disable-dpms.conf.original.$(date +%s) || echo "/etc/X11/xorg.conf.d/99-disable-dpms.conf not found, file will be created"
  echo -e """
Section \"Extensions\"
    Option      \"DPMS\" \"Disable\"
EndSection""" > /etc/X11/xorg.conf.d/99-disable-dpms.conf

  # This order is important, make sure X is running BEFORE dcvserver.
  # Also make sure there is no other X server running when you Start X below (e.g: stop gdm etc ...)
  log_info "Automatic start Gnome upon reboot"
  systemctl set-default graphical.target

  log_info "Start X"
  systemctl isolate multi-user.target
  systemctl isolate graphical.target

  log_info "Creating SOCA DCV Service to start/stop DCV session via socadcv"

  if [[ -f "/etc/systemd/system/socadcv.service" ]]; then
    log_info "/etc/systemd/system/socadcv.service already exist, probably from a previous configuration, removing it and creating a new one"
    systemctl stop socadcv.service || echo "Stopping socadcv.service not needed"
    systemctl disable socadcv.service || echo "Disabling socadcv.service not needed"
    rm -f /etc/systemd/system/socadcv.service
    systemctl daemon-reload
    systemctl reset-failed socadcv.service || echo "reset-failed socadcv.service not needed"
  fi

  echo -e "
[Unit]
Description=SOCA DCV Setup Service

[Service]
User=root
Type=oneshot
ExecStart=/bin/bash -c 'if systemctl is-active --quiet gdm; then systemctl stop gdm; fi; systemctl start gdm; for i in {1..10}; do if [[ -e /tmp/.X11-unix/X0 ]]; then break; else sleep 1; fi; done; if systemctl is-active --quietdcvserver; then systemctl stop dcvserver; fi; systemctl start dcvserver;'
ExecStartPost=/usr/bin/su - ${DCV_SESSION_OWNER} -c '/usr/bin/dcv create-session --owner ${DCV_SESSION_OWNER} --storage-root \"/data/home/socaadmin/dcv_session_storage\" ${DCV_SESSION_ID}'
ExecStop=/bin/bash -c '/usr/bin/dcv close-session ${DCV_SESSION_ID}'

RemainAfterExit=yes

[Install]
WantedBy=multi-user.target" > /etc/systemd/system/socadcv.service
  log_info "Enabling & start SOCA DCV Service as reboot"
  systemctl enable socadcv

  log_info "Launching DCV session dcv create-session --user ${DCV_SESSION_OWNER} --owner ${DCV_SESSION_OWNER} --type virtual --storage-root ${DCV_STORAGE_ROOT} ${DCV_SESSION_ID}"
  systemctl start socadcv

  log_info "Stopping Firewall if needed"
  systemctl stop firewalld
  systemctl disable firewalld
  popd

}
install_dcv_server
# End: Install & Configure DCV Server