# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin: Install/Update Required Linux Packages
{% if context.get("/configuration/BaseOS") in ("amazonlinux2", "amazonlinux2023", "centos7", "rhel7", "rhel8", "rhel9", "rocky8", "rocky9") %}
function system_packages_install {
  log_info "# Begin: Install/Update Required Linux Packages"
  local ORIG_SYSTEM_PKGS=({{ context.get("/packages/system") }})
  local ORIG_CONTROLLER_PKGS=({{ context.get("/packages/controller") }})
  local ORIG_SSSD_PKGS=({{ context.get("/packages/sssd") }})
  local ORIG_OPENLDAP_SERVER_PKGS=({{ context.get("/packages/openldap_server") }})
  local USER_EXTRA_PKGS=({{ context.get("/packages/user_extra") }})

  if [[ ! -f /root/soca_preinstalled_packages.log ]]; then
    log_info "No preinstalled package log found - preparing BaseOS - {{ context.get("/configuration/BaseOS") }} .."
    {% if context.get("/configuration/BaseOS") == "amazonlinux2023" %}
        REMOVE_PKGS=(
          libselinux-python
          libverto-tevent
          system-lsb
          tcp_wrappers
          redhat-lsb
          dejavu-fonts-common
          postgresql
          postgresql-contrib
          postgresql-server
          compat-openldap
          http-parser
          ntp
        )
        ADD_PKGS=(
          rsyslog
          amazon-efs-utils
          amazon-cloudwatch-agent
          python3-libselinux
          dejavu-fonts-all
          postgresql15
          postgresql15-contrib
          postgresql15-server
          openldap-compat
          authselect-compat
        )
    {% elif context.get("/configuration/BaseOS") == "rhel7"  %}
        log_info "Customizing packages for RHEL 7"
        yum-config-manager --enable rhel-7-server-rhui-optional-rpms

    {% elif context.get("/configuration/BaseOS") in ("rocky8", "rhel8") %}
        {% if context.get("/configuration/BaseOS") == "rhel8" %}
            log_info "Customizing packages for RHEL 8"
            dnf config-manager --set-enabled codeready-builder-for-rhel-8-rhui-rpms
        {% elif context.get("/configuration/BaseOS") == "rocky8" %}
          log_info "Customizing packages for Rocky 8"
          dnf config-manager --set-enabled powertools
        {% endif %}
        REMOVE_PKGS=(
          libselinux-python
          libverto-tevent
          system-lsb
          compat-openldap
          ntp
          lzma
          tcp_wrappers
          python-sssdconfig
        )
        ADD_PKGS=(
          autoconf
          automake
          make
          rsyslog
          python3-libselinux
          python3-sss
          authselect-compat
          dejavu-fonts-common
          redhat-lsb
          ec2-hibinit-agent
          xz-devel
        )

      {% elif context.get("/configuration/BaseOS") in ("rocky9", "rhel9") %}

        {% if context.get("/configuration/BaseOS") == "rhel9" %}
          log_info "Customizing packages for RHEL 9"
          dnf config-manager --set-enabled codeready-builder-for-rhel-9-rhui-rpms
        {% elif context.get("/configuration/BaseOS") == "rocky9" %}
          log_info "Customizing packages for Rocky 9"
          # PowerTool is known as crb on Rocky9 https://wiki.rockylinux.org/rocky/repo/#notes-on-crb
          dnf config-manager --set-enabled crb
        {% endif %}

        REMOVE_PKGS=(
          libselinux-python
          libverto-tevent
          system-lsb
          redhat-lsb
          dejavu-fonts-common
          compat-openldap
          ntp
          htop
          tcp_wrappers
          python-sssdconfig
        )
        ADD_PKGS=(
          automake
          autoconf
          make
          rsyslog
          python3-libselinux
          python3-sss
          authselect-compat
          ec2-hibinit-agent
        )
    {% else %}
      log_info "No special customization for BaseOS"
    {% endif %}

    # Cleanup our _PKGS lists from our ORIG_* versions (Original)
    # NOTE - REMOVE_PKGS appears twice - this is not a typo
    log_info "Removing packages: ${REMOVE_PKGS[*]}"

    SYSTEM_PKGS=( $(printf "%s\n" "${ORIG_SYSTEM_PKGS[@]}" "${REMOVE_PKGS[@]}" "${REMOVE_PKGS[@]}" | sort | uniq -u) )
    CONTROLLER_PKGS=( $(printf "%s\n" "${ORIG_CONTROLLER_PKGS[@]}" "${REMOVE_PKGS[@]}" "${REMOVE_PKGS[@]}" | sort | uniq -u) )
    SSSD_PKGS=( $(printf "%s\n" "${ORIG_SSSD_PKGS[@]}" "${REMOVE_PKGS[@]}" "${REMOVE_PKGS[@]}" | sort | uniq -u) )
    OPENLDAP_SERVER_PKGS=( $(printf "%s\n" "${ORIG_OPENLDAP_SERVER_PKGS[@]}" "${REMOVE_PKGS[@]}" "${REMOVE_PKGS[@]}" | sort | uniq -u) )

    log_info "Adding packages: ${ADD_PKGS[*]}"
    SYSTEM_PKGS+=(${ADD_PKGS[@]})

    # Now perform the installation of the potentially updated package lists
    {% if context.get("/job/NodeType") == "controller" %}
      packages_install ${SYSTEM_PKGS[@]} ${CONTROLLER_PKGS[@]} ${OPENLDAP_SERVER_PKGS[@]} ${SSSD_PKGS[@]} ${USER_EXTRA_PKGS[@]}
    {% else %}
      packages_install ${SYSTEM_PKGS[@]} ${CONTROLLER_PKGS[@]} ${SSSD_PKGS[@]} ${USER_EXTRA_PKGS[@]}
    {% endif %}

    # Post Install commands
    {% if context.get("/configuration/BaseOS") in ("rhel8", "rocky8", "rhel9", "rocky9") %}
      systemctl enable hibinit-agent
    {% endif %}

    # Create file to bypass package installation if we create an AMI from this machine
    touch /root/soca_preinstalled_packages.log
  else
    log_info "Existing Package log found /root/soca_preinstalled_packages.log - bypassing package installation steps. Remove this file if you have modified the list of package to install"
  fi
  log_info "# End: Install/Update Required Linux Packages"
}
system_packages_install
{% endif %}
