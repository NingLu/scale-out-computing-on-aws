# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

function install_python_dependencies() {
  local packages=(
    "python3-devel"
    "gcc"
    "gcc-c++"
    "make"
    "zlib-devel"
    "bzip2-devel"
    "readline-devel"
    "sqlite-devel"
    "openssl-devel"
    "libffi-devel"
    "ncurses-devel"
    "gdbm-devel"
    "expat-devel"
    "libuuid-devel"
    "tk-devel"
    "xz-devel"
  )
  
  # Try different package managers and approaches
  local install_success=false
  
  # Method 1: Try with dnf
  if command -v dnf >/dev/null 2>&1; then
    log_info "Attempting package installation with dnf..."
    if PYTHONPATH="" dnf install -y "${packages[@]}" 2>/dev/null; then
      install_success=true
      log_info "Successfully installed dependencies with dnf"
    fi
  fi
  
  # Method 2: Try with yum if dnf failed
  if [ "$install_success" = false ] && command -v yum >/dev/null 2>&1; then
    log_info "Attempting package installation with yum..."
    if PYTHONPATH="" yum install -y "${packages[@]}" 2>/dev/null; then
      install_success=true
      log_info "Successfully installed dependencies with yum"
    fi
  fi
  
  if [ "$install_success" = false ]; then
    log_info "Warning: Some dependencies may not be installed. Python compilation may fail."
    log_info "Continuing with Python installation attempt..."
  fi
}
install_python_dependencies

function install_soca_python () {
  log_info "Installing SOCA Python"

  mkdir -p "${SOCA_BOOTSTRAP_ASSETS_FOLDER}/soca_python"
  pushd "${SOCA_BOOTSTRAP_ASSETS_FOLDER}/soca_python"
  local PYTHON_VERSION="{{ context.get("/system/python/version") }}"
  local PYTHON_URL="https://aws-gcr-industry-assets.s3.cn-northwest-1.amazonaws.com.cn/soca/Python-3.13.2.tgz"
  local PYTHON_SHA256="{{ context.get("/system/python/sha256") }}"
  local SOCA_PYTHON_LOCAL_INSTALL_PREFIX="/opt/soca/{{ context.get("/configuration/ClusterId") }}/python/${PYTHON_VERSION}/$(uname -m)/{{ context.get('/configuration/BaseOS') }}"
  local SOCA_PYTHON_VENV="${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}/soca-python-virtual-env"
  local SOCA_PYTHON_SITE_PACKAGES
  chmod +x "${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}/bin/python3"

  if [[ $(${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}/bin/python3 --version | awk {'print $NF'}) == "${PYTHON_VERSION}" ]]; then
    log_info "Local SOCA_PYTHON ${SOCA_PYTHON_LOCAL_INSTALL_PREFIX} found and at correct version, skipping SOCA_PYTHON Install"
  else

    {% if context.get("/configuration/BaseOS") == "amazonlinux2" %}
       log_info "AmazonLinux2 ships with OpenSSL 1.0.x, bumping to openssl11"
       if ! verify_package_installed openssl11; then
         # Note: you need openssl 1.1.x devel, however you cannot install them if openssl 1.0.x devel is already there
         if verify_package_installed openssl-devel; then
           log_info "Removing openssl 1.0.x devel"
           packages_remove openssl-devel
         fi
         packages_install openssl11 openssl11-devel
        log_info "openssl11 is installed on /usr/bin/openssl11, we move the required lib/include to the a different folder: /opt/soca/{{ context.get('/configuration/ClusterId') }}/packages/openssl11/"
         # Avoid conflict with openssl1.0.x
         mkdir -p "/opt/soca/{{ context.get('/configuration/ClusterId') }}/packages/openssl11/lib"
         mkdir -p "/opt/soca/{{ context.get('/configuration/ClusterId') }}/packages/openssl11/include"
         cp -r /usr/include/openssl "/opt/soca/{{ context.get('/configuration/ClusterId') }}/packages/openssl11/include"
         cp /usr/lib64/libssl.so.1.1.* /usr/lib64/libcrypto.so.1.1 "/opt/soca/{{ context.get('/configuration/ClusterId') }}/packages/openssl11/lib"
       fi
    {% endif %}

    log_info "Local SOCA_PYTHON ${SOCA_PYTHON_LOCAL_INSTALL_PREFIX} not found, installing it"
    mkdir -p ${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}
    log_info "${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}/bin/python3 not detected or at wrong version, installing Python ${PYTHON_VERSION}"
    mkdir -p "{{ context.get("/configuration/ClusterId") }}"/python/installer
    pushd "{{ context.get("/configuration/ClusterId") }}"/python/installer
    file_download --download-url="${PYTHON_URL}" --save-as="python3_soca_installer.tgz" --sha256-checksum="${PYTHON_SHA256}"
    tar xvf "python3_soca_installer.tgz" --strip-components=1 -C .

    {% if context.get("/job/NodeType") == "controller" %}
      # Full-featured Python build for controller nodes
      local CXX="g++"
      local PKG_CONFIG_PATH="/opt/soca/{{ context.get("/configuration/ClusterId") }}/packages/sqlite/lib/pkgconfig:$PKG_CONFIG_PATH"
      local CPPFLAGS="-I/opt/soca/{{ context.get("/configuration/ClusterId") }}/packages/sqlite/include"
      local LDFLAGS="-L/opt/soca/{{ context.get("/configuration/ClusterId") }}/packages/sqlite/lib"
      local ADDITIONAL_ARGS=""

      {% if context.get("/configuration/BaseOS") == "amazonlinux2" %}
        # ALI2, we use a custom OpenSSL as ALI2 ships with OpenSSL1.0 and we need 1.1
        # We disable gcov to avoid compilation error when using --enable-optimization with custom sqlite3
        CPPFLAGS+=" -I/opt/soca/{{ context.get("/configuration/ClusterId") }}/packages/openssl11/include"
        LDFLAGS+=" -L/opt/soca/{{ context.get("/configuration/ClusterId") }}/packages/openssl11/lib"
        CFLAGS+=" -fno-omit-frame-pointer -fno-profile-arcs -fno-test-coverage"
        ADDITIONAL_ARGS+=" --with-openssl=/opt/soca/{{ context.get("/configuration/ClusterId") }}/packages/openssl11"
        export LD_LIBRARY_PATH="/opt/soca/{{ context.get("/configuration/ClusterId") }}/packages/openssl11/lib:$LD_LIBRARY_PATH"
      {% endif %}

      local PYTHON_CONFIGURE_CMD="./configure"
      PYTHON_CONFIGURE_CMD+=" CXX=\"${CXX}\""
      PYTHON_CONFIGURE_CMD+=" PKG_CONFIG_PATH=\"${PKG_CONFIG_PATH}\""
      PYTHON_CONFIGURE_CMD+=" CPPFLAGS=\"${CPPFLAGS}\""
      PYTHON_CONFIGURE_CMD+=" LDFLAGS=\"${LDFLAGS}\""
      PYTHON_CONFIGURE_CMD+=" --enable-loadable-sqlite-extensions"
      PYTHON_CONFIGURE_CMD+=" --prefix=\"${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}\""
      PYTHON_CONFIGURE_CMD+=" --enable-shared"
      # PYTHON_CONFIGURE_CMD+=" --enable-optimizations"
      # PYTHON_CONFIGURE_CMD+=" --with-lto"
      PYTHON_CONFIGURE_CMD+=" --with-ensurepip=install"
      PYTHON_CONFIGURE_CMD+=" --build=\$(uname -m)-linux-gnu"
      PYTHON_CONFIGURE_CMD+=" --host=\$(uname -m)-linux-gnu"
      PYTHON_CONFIGURE_CMD+=" ${ADDITIONAL_ARGS}"

      if ! eval ${PYTHON_CONFIGURE_CMD}; then
        exit_fail "Unable to run [${PYTHON_CONFIGURE_CMD}] for SOCA_PYTHON. Check bootstrap logs."
      fi

    {% else %}
      # Minimal Python build for compute nodes
      local CXX="g++"
      local PKG_CONFIG_PATH="/opt/soca/{{  context.get("/configuration/ClusterId")  }}/packages/sqlite/lib/pkgconfig:$PKG_CONFIG_PATH"
      local ADDITIONAL_ARGS=""

       {% if context.get("/configuration/BaseOS") == "amazonlinux2" %}
        ADDITIONAL_ARGS+=" --with-openssl=/opt/soca/{{ context.get("/configuration/ClusterId") }}/packages/openssl11"
        export LD_LIBRARY_PATH="/opt/soca/{{ context.get("/configuration/ClusterId") }}/packages/openssl11/lib:$LD_LIBRARY_PATH"
       {% endif %}

      local PYTHON_CONFIGURE_CMD="./configure"
      PYTHON_CONFIGURE_CMD+=" CXX=\"${CXX}\""
      PYTHON_CONFIGURE_CMD+=" --prefix=\"${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}\""
      PYTHON_CONFIGURE_CMD+=" --enable-shared"
      PYTHON_CONFIGURE_CMD+=" ${ADDITIONAL_ARGS}"

      if ! eval ${PYTHON_CONFIGURE_CMD}; then
        exit_fail "Unable to run [${PYTHON_CONFIGURE_CMD}] for SOCA_PYTHON. Check bootstrap logs."
      fi
    {% endif %}

    if ! make -j$(nproc); then
      exit_fail "Unable to run 'make' for SOCA_PYTHON. Check bootstrap logs."
    fi

    if ! make install -j$(nproc); then
       exit_fail "Unable to run 'make install' for SOCA_PYTHON. Check bootstrap logs."
    fi

    log_info "Creating symlink /opt/soca/{{ context.get("/configuration/ClusterId") }}/python/latest pointing to ${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}"
    ln -sf ${SOCA_PYTHON_LOCAL_INSTALL_PREFIX} "/opt/soca/{{ context.get("/configuration/ClusterId") }}/python/latest"
    popd

    log_info "SOCA_PYTHON installed successfully, updating dynamic linker cache"

    # ensure 99- is there to avoid version conflict if /lib64 system python3 is already at the same version
    echo "/lib64" > /etc/ld.so.conf.d/00-system-python.conf # ensure system python is always loaded first
    echo "/opt/soca/{{ context.get('/configuration/ClusterId') }}/python/latest/lib" > /etc/ld.so.conf.d/99-{{ context.get('/configuration/ClusterId') }}-python.conf
    if ! ldconfig; then
      exit_fail "SOCA_PYTHON installed but unable to update ldconfig. Check bootstrap logs"
    fi

    # Install Python required libraries
    {% if context.get("/job/NodeType") == "controller" %}
      echo "{%- include "templates/linux/soca_python_controller_requirements.txt.j2" -%}" > requirements.txt
    {% else %}
      echo "{%- include "templates/linux/soca_python_compute_node_requirements.txt.j2" -%}" > requirements.txt
    {% endif %}

    log_info "Creating ${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}/soca_python.env"
    echo "
export PYTHONPATH=/opt/soca/{{ context.get("/configuration/ClusterId") }}/cluster_manager/
export PYTHONUSERBASE=${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}
export PYTHONEXECUTABLE=${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}/bin/python3
" > ${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}/soca_python.env

    # Source SOCA_PYTHON Environment.
    # This command is also applied to all other scripts via common.sh.j2
    source ${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}/soca_python.env

    # --user to make sure python libs are installed in the SOCA_PYTHON path only (we don't touch system python)
    if ! ${SOCA_PYTHON_LOCAL_INSTALL_PREFIX}/bin/pip3 install --user -i https://pypi.tuna.tsinghua.edu.cn/simple -r requirements.txt; then
        exit_fail "Unable to install SOCA Python requirements (see templates/linux/soca_python_requirements.txt.j2)"
    fi

  fi
  popd
  log_info "Python and relevant dependency installed"
}
install_soca_python
# End: : Install Python on the Controller Host