# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# Begin: OpenPBS Configure Server
function openpbs_configure_server () {
    log_info "[BEGIN] openpbs_configure_server .. "
    local SCHEDULER_HOSTNAME="{{ context.get("/configuration/ControllerPrivateDnsName") }}"
    local SOCA_CLUSTER_ID="{{ context.get("/configuration/ClusterId") }}"
    local SOCA_BASE_OS="{{ context.get("/configuration/BaseOS") }}"
    local SOCA_INSTALL_AMI="{{ context.get("/configuration/CustomAmi") }}"

    cp /etc/pbs.conf /etc/pbs.conf.original."$(date +%s)"
    echo "PBS_SERVER=${SCHEDULER_HOSTNAME}
PBS_START_SERVER=1
PBS_START_SCHED=1
PBS_START_COMM=1
PBS_START_MOM=0
PBS_EXEC=/opt/pbs
PBS_HOME=/var/spool/pbs
PBS_CORE_LIMIT=unlimited
PBS_SCP=/usr/bin/scp
" > /etc/pbs.conf
    echo "\$clienthost ${SCHEDULER_HOSTNAME}" > /var/spool/pbs/mom_priv/config

    # Default AWS Resources
    cat <<EOF >>/var/spool/pbs/server_priv/resourcedef
anonymous_metrics type=string
asg_spotfleet_id type=string
availability_zone type=string
base_os type=string
compute_node type=string flag=h
efa_support type=string
error_message type=string
force_ri type=string
fsx_lustre type=string
fsx_lustre_deployment_type type=string
fsx_lustre_per_unit_throughput type=string
fsx_lustre_size type=string
ht_support type=string
instance_profile type=string
instance_ami type=string
instance_id type=string
instance_type type=string
instance_type_used type=string
keep_ebs type=string
placement_group type=string
root_size type=string
scratch_iops type=string
scratch_size type=string
security_groups type=string
spot_allocation_count type=string
spot_allocation_strategy type=string
spot_price type=string
stack_id type=string
subnet_id type=string
system_metrics type=string
EOF
    systemctl enable pbs
    systemctl start pbs
    sleep 30

    # Create Default PBS hooks
    for queue_hook_file in /opt/soca/"${SOCA_CLUSTER_ID}"/cluster_hooks/queuejob/*.py;
    do
      hook_name=$(basename "${queue_hook_file}" | cut -f1 -d.)
      if [ "${hook_name}" == "check_project_budget" ]; then
        log_info "Skipping ${hook_name} from auto-creation. Manually configure and load the hook if needed"
        continue
      fi
      log_info "Creating hook ${hook_name} from ${queue_hook_file}"
      # FIXME / TODO - This needs to be fixed. Users should be able to validate checksums on files, and this breaks that
      # Hooks need to be converted to be smarter about where they are and the directory locations
      sed -i "s/%SOCA_CLUSTER_ID/${SOCA_CLUSTER_ID}/g" "${queue_hook_file}"
      /opt/pbs/bin/qmgr -c "create hook ${hook_name} event=queuejob"
      /opt/pbs/bin/qmgr -c "import hook ${hook_name} application/x-python default ${queue_hook_file}"
    done

    # Scheduler node creation
    /opt/pbs/bin/qmgr -c "create node ${SCHEDULER_HOSTNAME}"
    /opt/pbs/bin/qmgr -c "set node ${SCHEDULER_HOSTNAME} queue = workq"

    # Default Server config settings
    # Should probably find a better place for these
    declare -A qmgr_configs
    qmgr_configs["flatuid"]="true"
    qmgr_configs["job_history_enable"]="1"
    qmgr_configs["job_history_duration"]="72:00:00"
    qmgr_configs["scheduler_iteration"]="30"
    qmgr_configs["max_concurrent_provision"]="5000"
    qmgr_configs["python_restart_max_hooks"]="9999999"

    for config_key in "${!qmgr_configs[@]}"
    do
        log_info "Setting Qmgr configuration key (${config_key}) => (${qmgr_configs[${config_key}]})"
        /opt/pbs/bin/qmgr -c "set server ${config_key}=${qmgr_configs[${config_key}]}"
    done

    # Default Queue Configs
    for queue_name in low normal high job-shared test alwayson;
    do
      log_info "Creating queue ${queue_name}"
      /opt/pbs/bin/qmgr -c "create queue ${queue_name}"
      /opt/pbs/bin/qmgr -c "set queue ${queue_name} queue_type = Execution"
      /opt/pbs/bin/qmgr -c "set queue ${queue_name} started = True"
      /opt/pbs/bin/qmgr -c "set queue ${queue_name} enabled = True"
      # Alwayson special case - no compute_node=tbd setting needed
      if [ "${queue_name}" != "alwayson" ]; then
        /opt/pbs/bin/qmgr -c "set queue ${queue_name} default_chunk.compute_node=tbd"
      fi
    done

    #
    /opt/pbs/bin/qmgr -c "set server default_queue = normal"

    # Add compute_node to list of required resource
    sed -i 's/resources: "ncpus, mem, arch, host, vnode, aoe, eoe"/resources: "ncpus, mem, arch, host, vnode, aoe, eoe, compute_node"/g' /var/spool/pbs/sched_priv/sched_config

    cat <<EOT >> /opt/soca/"${SOCA_CLUSTER_ID}"/cluster_manager/orchestrator/settings/queue_mapping.yml
# This manage automatic provisioning for your queues
# These are default values. Users can override them at job submission
# https://awslabs.github.io/scale-out-computing-on-aws-documentation/tutorials/create-your-own-queue/
queue_type:
  compute:
    queues: ["high", "normal", "low"]
    # Uncomment to limit the number of concurrent running jobs
    # max_running_jobs: 50
    # Uncomment to limit the number of concurrent running instances
    # max_provisioned_instances: 30
    # Queue ACLs:  https://awslabs.github.io/scale-out-computing-on-aws-documentation/documentation/tutorials/manage-queue-acls/
    allowed_users: [] # empty list = all users can submit job
    excluded_users: [] # empty list = no restriction, ["*"] = only allowed_users can submit job
    # Queue mode (can be either fifo or fairshare)
    # queue_mode: "fifo"
    # Instance types restrictions: https://awslabs.github.io/scale-out-computing-on-aws-documentation/documentation/security/manage-queue-instance-types/
    allowed_instance_types: [] # Empty list, all EC2 instances allowed. You can restrict by instance type (Eg: ["c5.4xlarge"]) or instance family (eg: ["c5"])
    excluded_instance_types: [] # Empty list, no EC2 instance types prohibited.  You can restrict by instance type (Eg: ["c5.4xlarge"]) or instance family (eg: ["c5"])
    # List of parameters user can not override: https://awslabs.github.io/scale-out-computing-on-aws-documentation/documentation/security/manage-queue-restricted-parameters/
    restricted_parameters: []
    # Scaling mode (can be either single_job, or multiple_jobs): single_job runs a single job per EC2 instance, multiple_jobs allows running multiple jobs on the same EC2 instance
    scaling_mode: "single_job" # Allowed values: single_job, multiple_jobs
    # List of additional security groups / IAM instance profile that can be used https://awslabs.github.io/scale-out-computing-on-aws/security/use-custom-sgs-roles/
    allowed_security_group_ids: []
    allowed_instance_profiles: []
    # Default job parameters: https://awslabs.github.io/scale-out-computing-on-aws-documentation/tutorials/integration-ec2-job-parameters/
    # instance_ami: "$SOCA_INSTALL_AMI" # If you want to enforce a default AMI, make sure it match value of base_os
    # base_os: "$SOCA_BASE_OS" # To enforce a specific operating system for your HPC nodes
    instance_type: "c6i.large" # Required
    ht_support: "false"
    root_size: "40"
    #scratch_size: "100"
    #scratch_iops: "3600"
    #efa_support: "false"
    # .. Refer to the doc for more supported parameters
  job-shared:
    queues: ["job-shared"]
    # Uncomment to limit the number of concurrent running jobs
    # max_running_jobs: 50
    # Queue ACLs:  https://awslabs.github.io/scale-out-computing-on-aws-documentation/documentation/manage-queue-acls/
    allowed_users: [] # empty list = all users can submit job
    excluded_users: [] # empty list = no restriction, ["*"] = only allowed_users can submit job
    # Queue mode (can be either fifo or fairshare)
    # queue_mode: "fifo"
    # Instance types restrictions: https://awslabs.github.io/scale-out-computing-on-aws-documentation/documentation/security/manage-queue-instance-types/
    allowed_instance_types: [] # Empty list, all EC2 instances allowed. You can restrict by instance type (Eg: ["c5.4xlarge"]) or instance family (eg: ["c5"])
    excluded_instance_types: [] # Empty list, no EC2 instance types prohibited.  You can restrict by instance type (Eg: ["c5.4xlarge"]) or instance family (eg: ["c5"])
    # List of parameters user can not override: https://awslabs.github.io/scale-out-computing-on-aws-documentation/documentation/security/manage-queue-restricted-parameters/
    restricted_parameters: []
    # Default job parameters: https://awslabs.github.io/scale-out-computing-on-aws-documentation/tutorials/integration-ec2-job-parameters/
    # Scaling mode (can be either single_job, or multiple_jobs): single_job runs a single job per EC2 instance, multiple_jobs allows running multiple jobs on the same EC2 instance
    scaling_mode: "multiple_jobs" # Allowed values: single_job, multiple_jobs
    instance_type: "c6i.large+c6i.xlarge+c6i.2xlarge" # Required
    # instance_ami: "$SOCA_INSTALL_AMI" # If you want to enforce a default AMI, make sure it match value of base_os
    # base_os: "$SOCA_BASE_OS" # To enforce a specific operating system for your HPC nodes
    # Terminate when idle: The value specifies the default duration (in mins) where the compute instances would be terminated after being detected as free (no jobs running) for N consecutive minutes
    terminate_when_idle: 3 # Required when scaling_mode is set to multiple_jobs
    ht_support: "true"
    placement_group: "false"
    root_size: "40"
    # .. Refer to the doc for more supported parameters
  test:
    queues: ["test"]
    # Uncomment to limit the number of concurrent running jobs
    # max_running_jobs: 50
    # Uncomment to limit the number of concurrent running instances
    # max_provisioned_instances: 30
    # Queue ACLs:  https://awslabs.github.io/scale-out-computing-on-aws-documentation/documentation/tutorials/manage-queue-acls/
    allowed_users: [] # empty list = all users can submit job
    excluded_users: [] # empty list = no restriction, ["*"] = only allowed_users can submit job
    # Queue mode (can be either fifo or fairshare)
    # queue_mode: "fifo"
    # Instance types restrictions: https://awslabs.github.io/scale-out-computing-on-aws-documentation/documentation/security/manage-queue-instance-types/
    allowed_instance_types: [] # Empty list, all EC2 instances allowed. You can restrict by instance type (Eg: ["c5.4xlarge"]) or instance family (eg: ["c5"])
    excluded_instance_types: [] # Empty list, no EC2 instance types prohibited.  You can restrict by instance type (Eg: ["c5.4xlarge"]) or instance family (eg: ["c5"])
    # List of parameters user can not override: https://awslabs.github.io/scale-out-computing-on-aws-documentation/documentation/security/manage-queue-restricted-parameters/
    restricted_parameters: []
    # List of additional security groups / IAM instance profile that can be used https://awslabs.github.io/scale-out-computing-on-aws-documentation/documentation/security/use-custom-sgs-roles/
    allowed_security_group_ids: []
    allowed_instance_profiles: []
    # Default job parameters: https://awslabs.github.io/scale-out-computing-on-aws-documentation/tutorials/integration-ec2-job-parameters/
    # instance_ami: "$SOCA_INSTALL_AMI" # If you want to enforce a default AMI, make sure it match value of base_os
    # base_os: "$SOCA_BASE_OS" # To enforce a specific operating system for your HPC nodes
    instance_type: "c6i.large"  # Required
    ht_support: "false"
    root_size: "40"
    #spot_price: "auto"
    #placement_group: "false"
    # .. Refer to the doc for more supported parameters
EOT
 log_info "[END] openpbs_configure_server .. "
}

openpbs_configure_server
# End: OpenPBS Configure Server
