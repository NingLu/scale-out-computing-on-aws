# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

function build_openpbs {
  pushd ${1}
  log_info "Building OpenPBS from $(pwd)"
  local NCPUS=$(nproc)
  local SOCA_PYTHON="/opt/soca/{{ context.get('/configuration/ClusterId') }}/python"
  log_info "Running AutoGen"

  if ! ./autogen.sh; then
    exit_fail "Unable to run autogen.sh for OpenPBS. See log for additional details"
  fi
  log_info "Running Configure, adding SOCA Python location to rpath"

  # objdump -x /opt/pbs/sbin/pbs_sched | grep RPATH ensure this contains path to SOCA_PYTHON for hooks
  if ! LDFLAGS="-Wl,-rpath,${SOCA_PYTHON}/latest/lib" ./configure --prefix=/opt/pbs --with-python=${SOCA_PYTHON}/latest; then
    exit_fail "Unable to run ./configure --prefix=/opt/pbs for OpenPBS. See log for additional details"
  fi

  log_info "Running Make"

  if ! make -j ${NCPU}; then
    exit_fail "Unable to run make -j ${NCPU} for OpenPBS. See log for additional details"
  fi

  if ! make install -j ${NCPU}; then
    exit_fail "Unable to run make install -j ${NCPU} for OpenPBS. See log for additional details"
  fi

  log_info "Post Build Command"
  if ! /opt/pbs/libexec/pbs_postinstall; then
    exit_fail "Unable to run  /opt/pbs/libexec/pbs_postinstall for OpenPBS. See log for additional details"
  fi

  chmod 4755 /opt/pbs/sbin/pbs_iff /opt/pbs/sbin/pbs_rcp
  log_info "Build Completed"
  popd
}


function openpbs_install {
    local OPENPBS_INSTALLED_VERS=$(/opt/pbs/bin/qstat --version | awk {'print $NF'})
    local INSTALLER_DIR="${SOCA_BOOTSTRAP_ASSETS_FOLDER}/openpbs"
    mkdir -p ${INSTALLER_DIR}
    pushd ${INSTALLER_DIR}

    {% if context.get("/configuration/SchedulerDeploymentType") == "tgz" %}
      log_info "Installing OpenPBS via tgz download"
      local OPENPBS_VERSION="{{ context.get("/system/scheduler/openpbs/tgz/version") }}"
      local OPENPBS_URL="{{ context.get("/system/scheduler/openpbs/tgz/url") }}"
      local OPENPBS_SHA256="{{ context.get("/system/scheduler/openpbs/tgz/sha256") }}"
      if [[ "${OPENPBS_INSTALLED_VERS}" != "${OPENPBS_VERSION}" ]]; then
          log_info "OpenPBS Not Detected, Installing OpenPBS"
          file_download --download-url="${OPENPBS_URL}" --save-as="openpbs_installer_${OPENPBS_VERSION}.tgz" --sha256-checksum="${OPENPBS_SHA256}"
          tar zxvf "openpbs_installer_${OPENPBS_VERSION}.tgz" -C ${INSTALLER_DIR} --strip-components=1
          build_openpbs ${INSTALLER_DIR}

      else
          log_info "OpenPBS already installed, and at correct version (${OPENPBS_VERSION})."
      fi

    {% elif context.get("/configuration/SchedulerDeploymentType") == "git" %}
      log_info "Installing OpenPBS via git"
      local OPENPBS_GIT_REPO="{{ context.get("/system/scheduler/openpbs/git/repo") }}"
      local OPENPBS_GIT_BRANCH="{{ context.get("/system/scheduler/openpbs/git/branch") }}"
      local OPENPBS_GIT_COMMIT_ID="{{ context.get("/system/scheduler/openpbs/git/commit_id") }}"
      local OPENPBS_VERSION="{{ context.get("/system/scheduler/openpbs/tgz/version") }}"

      if [[ "${OPENPBS_INSTALLED_VERS}" != "${OPENPBS_VERSION}" ]]; then
          log_info "OpenPBS Not Detected, Installing OpenPBS"
          # Note: clone in current directory without checkout to avoid new folder creation
          git clone ${OPENPBS_GIT_REPO} --no-checkout {% if context.get("/system/scheduler/openpbs/git/branch") %}--branch ${OPENPBS_GIT_BRANCH} {% endif %} ${INSTALLER_DIR}

          # Load actual content
          {% if context.get("/system/scheduler/openpbs/git/commit_id") %}
            git checkout ${OPENPBS_GIT_COMMIT_ID}
          {% else %}
            git checkout
          {% endif %}

          # Install Pre-requisite
          {% if context.get("/configuration/BaseOS") in ("ubuntu2204", "ubuntu2404") %}
            # Debian Based Distro
            if ! verify_package_installed cmake; then
              log_info "cmake version 3+ not installed, installing it"
              packages_install cmake
            fi
          {% else %}
            # RedHat based Distro
            if ! verify_package_installed cmake3; then
              log_info "cmake version 3+ not installed, installing it"
              packages_install cmake3
            fi
          {% endif %}


          # todo: understand why libcjson(-dev) from yum does not work here
          if test ! -e "/lib64/libcjson.so"; then
              log_info "/lib64/libcjson.so not found, installing it"
              git clone https://github.com/DaveGamble/cJSON.git
              pushd cJSON
              mkdir build
              pushd build
              {% if context.get("/configuration/BaseOS") in ("ubuntu2204", "ubuntu2404") %}
                cmake ..
              {% else %}
                cmake3 ..
              {% endif %}
              make
              make install
              ln -sf /usr/local/lib64/libcjson.so.1 /lib64/libcjson.so.1
          fi

        build_openpbs ${INSTALLER_DIR}

      else
          log_info "OpenPBS already installed, and at correct version (${OPENPBS_VERSION})."
      fi

    {% elif context.get("/configuration/SchedulerDeploymentType") == "s3_tgz" %}
     local OPENPBS_VERSION="{{ context.get("/system/scheduler/openpbs/s3_tgz/version") }}"
     local OPENPBS_S3_URI="{{ context.get("/system/scheduler/openpbs/s3_tgz/s3_uri") }}"

     log_info "Installing OpenPBS via an OpenPBS archive stored on S3"
      if [[ "${OPENPBS_INSTALLED_VERS}" != "${OPENPBS_VERSION}" ]]; then
          log_info "OpenPBS Not Detected, Installing OpenPBS"
          file_download --download-url="${OPENPBS_S3_URI}" --save-as="openpbs_installer_${OPENPBS_VERSION}.tgz" --download-type="s3"
          tar zxvf "openpbs_installer_${OPENPBS_VERSION}.tgz" -C ${INSTALLER_DIR} --strip-components=1
          build_openpbs ${INSTALLER_DIR}
      else
          log_info "OpenPBS already installed, and at correct version (${OPENPBS_VERSION})."
      fi

    {% else %}
      exit_fail "{{ context.get("/configuration/scheduler/deployment_type") }} must be tgz or git"

    {% endif %}
    popd
    log_info "Completed OpenPBS installation"
}
openpbs_install